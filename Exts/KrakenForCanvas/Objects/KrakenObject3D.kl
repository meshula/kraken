require Math;
require Containers;
require Geometry;
require Kraken;

object KrakenObject3D : KrakenItem {
  String buildName;
  String path;
  String layer;
  String component;
  Mat44 local;
  Mat44 global;
  Boolean visibility;
  Color color;
  String flags[String];
  UInt32 glue_joint_index;  // a KrakenJoint Index into list of all joints, until we know storing ref is not slower)
  Mat44 glue_offset;  // offset from that glue_joint_index joint
  UInt32 glue_space_uniqueId; // another ik of KrakenObject3D in which to calculate local space (store id, until we know storing ref is not slower)
};

function KrakenObject3D_DrawIntoLines_VertexColors(KrakenObject3D obj, Index firstIndex, io Lines lines) {
  GeometryAttributes attributes = lines.getAttributes();
  ColorAttribute vertexColors = attributes.getOrCreateColorAttribute('vertexColors');
  for(Size i=firstIndex;i<vertexColors.values.size();i++) {
    vertexColors.values[i] = obj.color;
  }
  vertexColors.incrementVersion();
}

function KrakenObject3D_DrawIntoLinesObject(KrakenObject3D obj, Xfo xfo, Boolean visibility, io Lines lines) {
  if(!visibility)
    return;
  Size firstIndex = lines.pointCount();
  lines.addAxes(xfo, 1.0);
  KrakenObject3D_DrawIntoLines_VertexColors(obj, firstIndex, lines);
}

/// \dfgPresetFolder DebugDrawing
function KrakenObject3D.drawIntoLinesObject(Xfo xfo, io Lines lines) {
}
