require Kraken;

object KrakenJoint : KrakenObject3D {
  // In order to effectively use "direct drive" to set joint Xfos, we need to do either of the following:
  // 1.)
  // Make sure that the DG is that any node that relies on the joint position acutally is downstream of that joint,
  // not downstream of a feeder source of that joint (e.g. a component output that the joint is pose-constrained to).
  // That is, get rid of intermediate transforms that drive joints and only use joints as drivers of other nodes.
  // Since this is hard / impossible right now without a Kraken graph optimizer
  // 2.)
  // Store all direct Xfo ancestors of joints that need to be set when a joint is set by direct-drive.  Essentially, treat
  // All objects that should have the joint's xfo as one.

  UInt32 identicalSourceObject3DUniquIds[];  //(store id, until we know storing ref is not slower)
};

/// \dfgPresetFolder Objects
function KrakenJoint(
  String name,
  String buildName,
  String path,
  String layer,
  String component,
  Xfo xfo,
  Boolean visibility,
  Color color
) {
  this.name = name;
  this.buildName = buildName;
  this.path = path;
  this.layer = layer;
  this.component = component;
  this.local = xfo.toMat44();
  this.visibility = visibility;
  this.color = color;
  this.glue_joint_index = -1;
  this.glue_space_uniqueId = -1;
}

/// \dfgPresetFolder DebugDrawing
function KrakenJoint.drawIntoLinesObject(Xfo xfo, io Lines lines) {
  if(!this.visibility)
    return;
  Size firstIndex = lines.pointCount();
  lines.addSphere(xfo, 0.5, 12);
  KrakenObject3D_DrawIntoLines_VertexColors(this, firstIndex, lines);
}
