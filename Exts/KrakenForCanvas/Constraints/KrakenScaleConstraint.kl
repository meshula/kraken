require Kraken;

struct KrakenScaleConstraint : KrakenConstraint {
};

/// \dfgPresetFolder Constraints
function KrakenScaleConstraint(
  Xfo offset,
) {
  this.offset = offset;
}

/// \dfgPresetFolder Constraints
function KrakenScaleConstraint.addConstrainer!(
  Xfo constrainer
) {
  this.constrainers.push(constrainer);
}

/// \dfgPresetFolder Constraints
function Xfo KrakenScaleConstraint.compute?(
  Xfo xfo
) {
  Xfo result = xfo;
  result.sc = Vec3();

  for(Size i=0;i<this.constrainers.size();i++) {
    result.sc = result.sc.add(this.constrainers[i].sc);
  }

  result.sc *= 1.0 / Float32(this.constrainers.size());

  return result * this.offset;
}

/// \dfgPresetFolder Constraints
function Xfo computeKrakenScaleConstraint(Xfo offset, Xfo constrainer, Xfo constrainee) {
  KrakenScaleConstraint constraint(offset);
  constraint.addConstrainer(constrainer);
  return constraint.compute(constrainee);
}

/// \dfgPresetFolder Constraints
function Xfo KrakenScaleConstraint.computeOffset?(
  Xfo constrainee
) {

  KrakenScaleConstraint tmpConstraint(Xfo());
  tmpConstraint.constrainers = this.constrainers;

  Xfo global = tmpConstraint.compute(constrainee);
  return global.inverse() * constrainee;
}

/// \dfgPresetFolder Constraints
function Xfo KrakenScaleConstraint.computeOffsetSimple!(Xfo constrainee, Xfo constrainer) {
  this.offset = Xfo();
  this.constrainers.resize(1);
  this.constrainers[0] = constrainer;
  return this.computeOffset(constrainee);
}
