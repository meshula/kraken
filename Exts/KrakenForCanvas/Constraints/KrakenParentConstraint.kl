require Kraken;

/// \dfgPresetColor Color(99, 129, 92)
object KrakenParentConstraint : KrakenConstraint {
};

/// \dfgPresetFolder Constraints
function KrakenParentConstraint(
  Mat44 offset,
) {
  this.offset = offset;
}

/// \dfgPresetFolder Constraints
function KrakenParentConstraint.addConstrainer!(
  Mat44 constrainer
) {
  this.constrainers.push(constrainer);
}

/// \dfgPresetFolder Constraints
function Mat44 KrakenParentConstraint.compute?(
  Mat44 m
) {

  Vec3 constrainee_scl;
  Mat33 constrainee_ori;
  Vec3 constrainee_pos;
  m.decompose(constrainee_scl, constrainee_ori, constrainee_pos);

  Xfo result = Xfo();
  //result.tr = Vec3();
  result.ori = Quat(0.0, 0.0, 0.0, 0.0);

  for(Size i=0;i<this.constrainers.size();i++) {
    Xfo constrainer(this.constrainers[i]);
    result.tr = result.tr.add(constrainer.tr);
    result.ori = result.ori.add(constrainer.ori);
    // todo: scaling is not maintained here!
  }
  result.ori.setUnit();
  result.tr *= 1.0 / Float32(this.constrainers.size());

  Vec3 sc;
  for(Size i=0;i<this.constrainers.size();i++) {
    sc += Xfo(this.constrainers[i]).sc;
  }
  sc *= 1.0 / Float32(this.constrainers.size());

  Mat44 resultMat44 = result.toMat44();
  resultMat44 = resultMat44.setScaling(sc) * this.offset;

  Vec3 scl;
  Mat33 ori;
  Vec3 pos;
  resultMat44.decompose(scl, ori, pos);
  resultMat44.set(pos, ori, constrainee_scl);
  return resultMat44;

}

/// \dfgPresetFolder Constraints
function Mat44 computeKrakenParentConstraint(Mat44 offset, Mat44 constrainer, Mat44 constrainee) {
  KrakenParentConstraint constraint(offset);
  constraint.addConstrainer(constrainer);
  return constraint.compute(constrainee);
}

/// \dfgPresetFolder Constraints
function Mat44 KrakenParentConstraint.computeOffset?(
  Mat44 constrainee
) {

  KrakenParentConstraint tmpConstraint(Mat44());
  tmpConstraint.constrainers = this.constrainers;

  Mat44 global = tmpConstraint.compute(constrainee);
  return global.inverse() * constrainee;
}

/// \dfgPresetFolder Constraints
function Mat44 KrakenParentConstraint.computeOffsetSimple!(Mat44 constrainee, Mat44 constrainer) {
  this.offset = Mat44();
  this.constrainers.resize(1);
  this.constrainers[0] = constrainer;
  return this.computeOffset(constrainee);
}
