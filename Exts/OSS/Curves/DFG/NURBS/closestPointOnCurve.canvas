{
  "objectType" : "Graph",
  "metadata" : {
    "uiGraphZoom" : "{\n  \"value\" : 1.064342141151428\n  }",
    "uiGraphPan" : "{\n  \"x\" : -719.9971923828125,\n  \"y\" : -2477.150146484375\n  }"
    },
  "title" : "closestPointOnCurve",
  "ports" : [
    {
      "objectType" : "Port",
      "metadata" : {},
      "nodePortType" : "Out",
      "defaultValues" : {
        "NURBSCurve" : null
        },
      "name" : "curve",
      "execPortType" : "In"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Mat44" : {
          "row0" : {
            "x" : 1,
            "y" : 0,
            "z" : 0,
            "t" : 0
            },
          "row1" : {
            "x" : 0,
            "y" : 1,
            "z" : 0,
            "t" : 0
            },
          "row2" : {
            "x" : 0,
            "y" : 0,
            "z" : 1,
            "t" : 0
            },
          "row3" : {
            "x" : 0,
            "y" : 0,
            "z" : 0,
            "t" : 1
            }
          }
        },
      "name" : "refPoint",
      "execPortType" : "In"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "defaultValues" : {
        "Vec3" : {
          "x" : 0,
          "y" : 0,
          "z" : 0
          }
        },
      "name" : "point",
      "execPortType" : "Out"
      }
    ],
  "extDeps" : {
    "Curves" : "*"
    },
  "presetGUID" : "BFCF05F7814409F24DFA8E4DF0D5FA83",
  "nodes" : [
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":1023.29,\"y\":2482.9}"
        },
      "name" : "findClosestPoint_fast",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "spline"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "defaultValues" : {
            "UInt32" : 5
            },
          "name" : "maxIterations"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "closestPoint"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "testPoint"
          }
        ],
      "definition" : {
        "objectType" : "Func",
        "metadata" : {
          "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }",
          "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }"
          },
        "title" : "findClosestPoint",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "spline",
            "execPortType" : "In",
            "typeSpec" : "NURBSCurve"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "maxIterations",
            "execPortType" : "In",
            "typeSpec" : "UInt32"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "closestPoint",
            "execPortType" : "Out",
            "typeSpec" : "Vec3"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "testPoint",
            "execPortType" : "In",
            "typeSpec" : "Vec3"
            }
          ],
        "extDeps" : {},
        "code" : "// function Scalar getClosestPointOnSpline(NURBSCurve spline, Vec3 testPoint, Scalar s1, Scalar s2, Scalar s3, UInt32 maxIterations = 20){
dfgEntry {
  maxIterations = 20;
  Scalar s1,s2,s3;
  Scalar s[3];  // The estimates
  s[0] = s1; s[1] = s2; s[2] = s3; 
 
  Scalar Ds[3]; // The distances squared to the estimates
 
  Scalar sk, skLast; // sk is the \"hopefully\" converging value generated, skLast is the previous one
 
  Scalar Ps[4]; // The function P(s) evaluated for the 4 values
 
  // For gradient and curviture approximation
  Scalar width = 1.0/(spline.numPoints * 1000); // step would be 1/1000 of a spline length 
  // report(\"width: \" + width);
  // The range of the parameter value for a spline segment * proportion of it is used to test for an exit condition 
  Scalar termCond = 1.0/(spline.numPoints * 1000);
 
  for (UInt32 i=0; i < maxIterations; i++){ // its typically done in under 10
 
    Ds[0] = (spline.getPoint(s[0]) - testPoint).lengthSquared();
    Ds[1] = (spline.getPoint(s[1]) - testPoint).lengthSquared();
    Ds[2] = (spline.getPoint(s[2]) - testPoint).lengthSquared();
 
    // Quadratic Minimization Bit
    sk = 0.5 * ( (s[1]*s[1] - s[2]*s[2]) * Ds[0] + (s[2]*s[2] - s[0]*s[0]) * Ds[1] + (s[0]*s[0] - s[1]*s[1]) * Ds[2] ) /
               ( (s[1]-s[2]) * Ds[0]         + (s[2] - s[0]) * Ds[1]       + (s[0] - s[1]) * Ds[2] );
 
    if (sk.isNaN()){ // denominator = 0, how unfortunate
      //printf (\"isnan %d %f\\n\", i, skLast);
 
      sk = skLast; // keep going?
     
      //return skLast;
      //return true;
    }
 
    // Newton Bit
    sk = Math_clamp(sk, width, 1.0-width); // so can interpolate points for Newtons method
 
    Scalar grad, curv; // 1st 2nd derivatives
    Scalar Ds_pt1 = (spline.getPoint(sk - width) - testPoint).lengthSquared();
    Scalar Ds_pt2 = (spline.getPoint(sk)         - testPoint).lengthSquared();
    Scalar Ds_pt3 = (spline.getPoint(sk + width) - testPoint).lengthSquared();
 
    Scalar g1 = (Ds_pt2 - Ds_pt1)/width;
    Scalar g2 = (Ds_pt3 - Ds_pt2)/width;
 
    grad = (Ds_pt3 - Ds_pt1)/(2*width);
 
    curv = (g2 - g1)/width;
 
    if (curv != 0.0){ 
      sk = sk - grad/curv;
      sk = Math_clamp(sk, 0.0, 1.0);
    }
 
    // termination criteria
    // difference between skLast and sk <= range of s over the segment x small constant
    if (i > 0){
      if (abs(sk - skLast) <= termCond){
        //printf (\"exit condition met %d %f %f\\n\", i, Math::Abs(sk - skLast), termCond);
        report(\"exit condition: \" + sk);
        closestPoint = spline.getPoint(sk);
        //return true;
      }
    }
    skLast = sk;
 
    // chose the best 3 from their Ps values (the closest ones we keep)
    // general Ps equation
    // Ps =    ((s-s2)*(s-s3))/((s1-s2)*(s1-s3)) * Ds1 + 
    //        ((s-s1)*(s-s3))/((s2-s1)*(s2-s3)) * Ds2 + 
    //        ((s-s1)*(s-s2))/((s3-s1)*(s3-s2)) * Ds3;
 
    Ps[0] = ((s[0]-s[1])*(s[0]-s[2]))/((s[0]-s[1])*(s[0]-s[2])) * Ds[0];
 
    Ps[1] = ((s[1]-s[0])*(s[1]-s[2]))/((s[1]-s[0])*(s[1]-s[2])) * Ds[1];
 
    Ps[2] = ((s[2]-s[0])*(s[2]-s[1]))/((s[2]-s[0])*(s[2]-s[1])) * Ds[2];
 
    Ps[3] = ((sk-s[1])*(sk-s[2]))/((s[0]-s[1])*(s[0]-s[2])) * Ds[0] + 
            ((sk-s[0])*(sk-s[2]))/((s[1]-s[0])*(s[1]-s[2])) * Ds[1] + 
            ((sk-s[0])*(sk-s[1]))/((s[2]-s[0])*(s[2]-s[1])) * Ds[2];                
 
 
    // find the worest one
    UInt32 biggest = 0;
    for (UInt32 i=1; i<4; i++){
      if (Ps[i]>Ps[biggest]){ biggest = i; }
    }
 
    if (biggest <= 2){ // update one of the estimates
      // equations will blow up if any of the estimates are the same
 
      s[biggest] = sk;
 
      // make them unique values
      for (UInt32 i=0; i<3; i++){
        for (UInt32 j=i+1; j<3; j++){
          if (s[i] == s[j]){
            if (s[j] < 0.5){ s[j] = s[j] + 0.0001; }
            else {           s[j] = s[j] - 0.0001; }
          }
        }
      }
    }
  }
  report(\"return condition: \" + sk);
  closestPoint = spline.getPoint(skLast);
  //return false;
}"
        }
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":131.955,\"y\":2635.89}",
        "uiCollapsedState" : "0"
        },
      "name" : "Translation_3",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "this"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "result"
          }
        ],
      "executable" : "Fabric.Exts.Math.Mat44.Translation",
      "presetGUID" : "35DC8AE364F6509754699978B97928A7"
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":1038.73,\"y\":2661.11}"
        },
      "name" : "newClosestPoint",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "IO",
          "name" : "point"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "this"
          }
        ],
      "definition" : {
        "objectType" : "Func",
        "title" : "newClosestPoint",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "IO",
            "defaultValues" : {
              "Vec3" : {
                "x" : 0,
                "y" : 0,
                "z" : 0
                }
              },
            "name" : "point",
            "execPortType" : "IO",
            "typeSpec" : "Vec3"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "defaultValues" : {
              "NURBSCurve" : null
              },
            "name" : "this",
            "execPortType" : "In",
            "typeSpec" : "NURBSCurve"
            }
          ],
        "extDeps" : {},
        "origPresetGUID" : "2E2B3121C9D16B4063FC98F50B920507",
        "code" : "dfgEntry {
  point = this.getClosestPoint(point);
}
"
        }
      }
    ],
  "connections" : {
    "curve" : [
      "findClosestPoint_fast.spline",
      "newClosestPoint.this"
      ],
    "refPoint" : [
      "Translation_3.this"
      ],
    "Translation_3.result" : [
      "findClosestPoint_fast.testPoint",
      "newClosestPoint.point"
      ],
    "newClosestPoint.point" : [
      "point"
      ]
    },
  "requiredPresets" : {
    "OSS.Exts.Curves.NURBS.closestPointOnCurve" : {
      "objectType" : "Graph",
      "metadata" : {
        "uiGraphZoom" : "{\n  \"value\" : 1.064342141151428\n  }",
        "uiGraphPan" : "{\n  \"x\" : -719.9971923828125,\n  \"y\" : -2477.150146484375\n  }"
        },
      "title" : "closestPointOnCurve",
      "ports" : [
        {
          "objectType" : "Port",
          "metadata" : {},
          "nodePortType" : "Out",
          "defaultValues" : {
            "NURBSCurve" : null
            },
          "name" : "curve",
          "execPortType" : "In"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "Out",
          "defaultValues" : {
            "Mat44" : {
              "row0" : {
                "x" : 1,
                "y" : 0,
                "z" : 0,
                "t" : 0
                },
              "row1" : {
                "x" : 0,
                "y" : 1,
                "z" : 0,
                "t" : 0
                },
              "row2" : {
                "x" : 0,
                "y" : 0,
                "z" : 1,
                "t" : 0
                },
              "row3" : {
                "x" : 0,
                "y" : 0,
                "z" : 0,
                "t" : 1
                }
              }
            },
          "name" : "refPoint",
          "execPortType" : "In"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "In",
          "defaultValues" : {
            "Vec3" : {
              "x" : 0,
              "y" : 0,
              "z" : 0
              }
            },
          "name" : "point",
          "execPortType" : "Out"
          }
        ],
      "extDeps" : {
        "Curves" : "*"
        },
      "presetGUID" : "BFCF05F7814409F24DFA8E4DF0D5FA83",
      "nodes" : [
        {
          "objectType" : "Inst",
          "metadata" : {
            "uiGraphPos" : "{\"x\":1023.29,\"y\":2482.9}"
            },
          "name" : "findClosestPoint_fast",
          "ports" : [
            {
              "objectType" : "InstPort",
              "nodePortType" : "In",
              "name" : "spline"
              },
            {
              "objectType" : "InstPort",
              "nodePortType" : "In",
              "defaultValues" : {
                "UInt32" : 5
                },
              "name" : "maxIterations"
              },
            {
              "objectType" : "InstPort",
              "nodePortType" : "Out",
              "name" : "closestPoint"
              },
            {
              "objectType" : "InstPort",
              "nodePortType" : "In",
              "name" : "testPoint"
              }
            ],
          "definition" : {
            "objectType" : "Func",
            "metadata" : {
              "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }",
              "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }"
              },
            "title" : "findClosestPoint",
            "ports" : [
              {
                "objectType" : "Port",
                "nodePortType" : "Out",
                "name" : "spline",
                "execPortType" : "In",
                "typeSpec" : "NURBSCurve"
                },
              {
                "objectType" : "Port",
                "nodePortType" : "Out",
                "name" : "maxIterations",
                "execPortType" : "In",
                "typeSpec" : "UInt32"
                },
              {
                "objectType" : "Port",
                "nodePortType" : "In",
                "name" : "closestPoint",
                "execPortType" : "Out",
                "typeSpec" : "Vec3"
                },
              {
                "objectType" : "Port",
                "nodePortType" : "Out",
                "name" : "testPoint",
                "execPortType" : "In",
                "typeSpec" : "Vec3"
                }
              ],
            "extDeps" : {},
            "code" : "// function Scalar getClosestPointOnSpline(NURBSCurve spline, Vec3 testPoint, Scalar s1, Scalar s2, Scalar s3, UInt32 maxIterations = 20){
dfgEntry {
  maxIterations = 20;
  Scalar s1,s2,s3;
  Scalar s[3];  // The estimates
  s[0] = s1; s[1] = s2; s[2] = s3; 
 
  Scalar Ds[3]; // The distances squared to the estimates
 
  Scalar sk, skLast; // sk is the \"hopefully\" converging value generated, skLast is the previous one
 
  Scalar Ps[4]; // The function P(s) evaluated for the 4 values
 
  // For gradient and curviture approximation
  Scalar width = 1.0/(spline.numPoints * 1000); // step would be 1/1000 of a spline length 
  // report(\"width: \" + width);
  // The range of the parameter value for a spline segment * proportion of it is used to test for an exit condition 
  Scalar termCond = 1.0/(spline.numPoints * 1000);
 
  for (UInt32 i=0; i < maxIterations; i++){ // its typically done in under 10
 
    Ds[0] = (spline.getPoint(s[0]) - testPoint).lengthSquared();
    Ds[1] = (spline.getPoint(s[1]) - testPoint).lengthSquared();
    Ds[2] = (spline.getPoint(s[2]) - testPoint).lengthSquared();
 
    // Quadratic Minimization Bit
    sk = 0.5 * ( (s[1]*s[1] - s[2]*s[2]) * Ds[0] + (s[2]*s[2] - s[0]*s[0]) * Ds[1] + (s[0]*s[0] - s[1]*s[1]) * Ds[2] ) /
               ( (s[1]-s[2]) * Ds[0]         + (s[2] - s[0]) * Ds[1]       + (s[0] - s[1]) * Ds[2] );
 
    if (sk.isNaN()){ // denominator = 0, how unfortunate
      //printf (\"isnan %d %f\\n\", i, skLast);
 
      sk = skLast; // keep going?
     
      //return skLast;
      //return true;
    }
 
    // Newton Bit
    sk = Math_clamp(sk, width, 1.0-width); // so can interpolate points for Newtons method
 
    Scalar grad, curv; // 1st 2nd derivatives
    Scalar Ds_pt1 = (spline.getPoint(sk - width) - testPoint).lengthSquared();
    Scalar Ds_pt2 = (spline.getPoint(sk)         - testPoint).lengthSquared();
    Scalar Ds_pt3 = (spline.getPoint(sk + width) - testPoint).lengthSquared();
 
    Scalar g1 = (Ds_pt2 - Ds_pt1)/width;
    Scalar g2 = (Ds_pt3 - Ds_pt2)/width;
 
    grad = (Ds_pt3 - Ds_pt1)/(2*width);
 
    curv = (g2 - g1)/width;
 
    if (curv != 0.0){ 
      sk = sk - grad/curv;
      sk = Math_clamp(sk, 0.0, 1.0);
    }
 
    // termination criteria
    // difference between skLast and sk <= range of s over the segment x small constant
    if (i > 0){
      if (abs(sk - skLast) <= termCond){
        //printf (\"exit condition met %d %f %f\\n\", i, Math::Abs(sk - skLast), termCond);
        report(\"exit condition: \" + sk);
        closestPoint = spline.getPoint(sk);
        //return true;
      }
    }
    skLast = sk;
 
    // chose the best 3 from their Ps values (the closest ones we keep)
    // general Ps equation
    // Ps =    ((s-s2)*(s-s3))/((s1-s2)*(s1-s3)) * Ds1 + 
    //        ((s-s1)*(s-s3))/((s2-s1)*(s2-s3)) * Ds2 + 
    //        ((s-s1)*(s-s2))/((s3-s1)*(s3-s2)) * Ds3;
 
    Ps[0] = ((s[0]-s[1])*(s[0]-s[2]))/((s[0]-s[1])*(s[0]-s[2])) * Ds[0];
 
    Ps[1] = ((s[1]-s[0])*(s[1]-s[2]))/((s[1]-s[0])*(s[1]-s[2])) * Ds[1];
 
    Ps[2] = ((s[2]-s[0])*(s[2]-s[1]))/((s[2]-s[0])*(s[2]-s[1])) * Ds[2];
 
    Ps[3] = ((sk-s[1])*(sk-s[2]))/((s[0]-s[1])*(s[0]-s[2])) * Ds[0] + 
            ((sk-s[0])*(sk-s[2]))/((s[1]-s[0])*(s[1]-s[2])) * Ds[1] + 
            ((sk-s[0])*(sk-s[1]))/((s[2]-s[0])*(s[2]-s[1])) * Ds[2];                
 
 
    // find the worest one
    UInt32 biggest = 0;
    for (UInt32 i=1; i<4; i++){
      if (Ps[i]>Ps[biggest]){ biggest = i; }
    }
 
    if (biggest <= 2){ // update one of the estimates
      // equations will blow up if any of the estimates are the same
 
      s[biggest] = sk;
 
      // make them unique values
      for (UInt32 i=0; i<3; i++){
        for (UInt32 j=i+1; j<3; j++){
          if (s[i] == s[j]){
            if (s[j] < 0.5){ s[j] = s[j] + 0.0001; }
            else {           s[j] = s[j] - 0.0001; }
          }
        }
      }
    }
  }
  report(\"return condition: \" + sk);
  closestPoint = spline.getPoint(skLast);
  //return false;
}"
            }
          },
        {
          "objectType" : "Inst",
          "metadata" : {
            "uiGraphPos" : "{\"x\":131.955,\"y\":2635.89}",
            "uiCollapsedState" : "0"
            },
          "name" : "Translation_3",
          "ports" : [
            {
              "objectType" : "InstPort",
              "nodePortType" : "In",
              "name" : "this"
              },
            {
              "objectType" : "InstPort",
              "nodePortType" : "Out",
              "name" : "result"
              }
            ],
          "executable" : "Fabric.Exts.Math.Mat44.Translation",
          "presetGUID" : "35DC8AE364F6509754699978B97928A7"
          },
        {
          "objectType" : "Inst",
          "metadata" : {
            "uiGraphPos" : "{\"x\":1038.73,\"y\":2661.11}"
            },
          "name" : "newClosestPoint",
          "ports" : [
            {
              "objectType" : "InstPort",
              "nodePortType" : "IO",
              "name" : "point"
              },
            {
              "objectType" : "InstPort",
              "nodePortType" : "In",
              "name" : "this"
              }
            ],
          "definition" : {
            "objectType" : "Func",
            "title" : "newClosestPoint",
            "ports" : [
              {
                "objectType" : "Port",
                "nodePortType" : "IO",
                "defaultValues" : {
                  "Vec3" : {
                    "x" : 0,
                    "y" : 0,
                    "z" : 0
                    }
                  },
                "name" : "point",
                "execPortType" : "IO",
                "typeSpec" : "Vec3"
                },
              {
                "objectType" : "Port",
                "nodePortType" : "Out",
                "defaultValues" : {
                  "NURBSCurve" : null
                  },
                "name" : "this",
                "execPortType" : "In",
                "typeSpec" : "NURBSCurve"
                }
              ],
            "extDeps" : {},
            "origPresetGUID" : "2E2B3121C9D16B4063FC98F50B920507",
            "code" : "dfgEntry {
  point = this.getClosestPoint(point);
}
"
            }
          }
        ],
      "connections" : {
        "curve" : [
          "findClosestPoint_fast.spline",
          "newClosestPoint.this"
          ],
        "refPoint" : [
          "Translation_3.this"
          ],
        "Translation_3.result" : [
          "findClosestPoint_fast.testPoint",
          "newClosestPoint.point"
          ],
        "newClosestPoint.point" : [
          "point"
          ]
        }
      },
    "Fabric.Exts.Math.Mat44.Translation" : {
      "objectType" : "Func",
      "metadata" : {
        "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
        "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.1.0/HTML/KLExtensionsGuide/Math/Mat44.html",
        "uiTooltip" : "Returns the translation components of\nthis matrix as a Vec3\n\n Supported by Mat44"
        },
      "title" : "Translation",
      "ports" : [
        {
          "objectType" : "Port",
          "metadata" : {
            "uiColor" : "{\n  \"r\" : 249,\n  \"g\" : 157,\n  \"b\" : 28\n  }"
            },
          "nodePortType" : "Out",
          "name" : "this",
          "execPortType" : "In",
          "typeSpec" : "Mat44"
          },
        {
          "objectType" : "Port",
          "metadata" : {
            "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
            },
          "nodePortType" : "In",
          "name" : "result",
          "execPortType" : "Out",
          "typeSpec" : "Vec3"
          }
        ],
      "extDeps" : {
        "Math" : "*"
        },
      "presetGUID" : "35DC8AE364F6509754699978B97928A7",
      "code" : "require Math;

dfgEntry {
  result = this.translation();
}
"
      }
    }
  }