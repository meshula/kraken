// NURBSCurve core implementation.
// 
// For math background search:
// - Non-uniform rational B-spline curve
// - Cox de Boor algorithm


require Math, FabricStatistics;
require Geometry, Color;

const UInt32 NURBSCurve_StandardResolution = 25;
const UInt32 NURBSCurve_MaxDegree = 16;

/// An implementation of a Non-uniform rational B-spline curve.
object NURBSCurve {

  /// Point index pairs for segments //curves
  UInt32 indices[];

  /// Thickness to be used for SpatialQueryable methods
  Scalar raycastThickness;

  /// \internal Created on demand. Cache from the meta-data dictionary to avoid locks.
  Object spatialAccelerationCache;

  /// This version is automatically incremented when attribute sharing layout changes
  UInt32 attributeSharingVersion;
  // Mat44 cMats[];

  UInt32 numCurves;
  UInt32 numPoints;
  UInt32 resolution;
  UInt32 degree;
  Scalar stepSize;
  Boolean computeColors;
  Mat44 cmats[];

  UInt32 pointSizes[];

  // per point, size numPoints
  GeometryAttributes pointAttributes;
	  Mat44Attribute controlMat44s;
	  Vec4Attribute controlPoints;
	  UInt32Attribute isSegmentStart;
	  ScalarAttribute weights;

  // per curve, size numCurves
  GeometryAttributes curveAttributes;
	  ScalarAttribute restLength;
	  UInt32Attribute closed;
	  // UInt32Attribute resolution;
	  UInt32Attribute clamped;

  // per curve,
  // arbitrary size per curve
  // depends on firstpoint, degree, closed and clamped
  Size knots[]; // per curve

  // per curve, cache size of resolution times number of curves
  // potentially add colors
  GeometryAttributes resolutionAttributes;
  Vec3Attribute positions;   // per curve point
	ScalarAttribute segLengths; // per curve point
	ScalarAttribute distances; // per curve point
	ColorAttribute colors; // per curve point
	Vec3Attribute normals; // per curve point

  Scalar basises[]; // supports degrees up to NURBSCurve_MaxDegree
  UInt32 spans[];
};


/// - - - - - - 
/// CONSTRUCTORS
/// Default constructor

function NURBSCurve() {
  // this.parent._init("NURBSCurve");
  // this.raycastThickness = 1e-4;
  this.pointAttributes = GeometryAttributes();
  this.controlMat44s   = this.pointAttributes.getOrCreateMat44Attribute('controlMat44s');
  this.controlPoints   = this.pointAttributes.getOrCreateVec4Attribute("controlPoints");
  this.isSegmentStart  = this.pointAttributes.getOrCreateUInt32Attribute('isSegmentStart');
  this.weights         = this.pointAttributes.getOrCreateScalarAttribute('weights');

  this.curveAttributes = GeometryAttributes();
  this.numCurves = 1;
  this.curveAttributes.resize(this.numCurves);

  // this.firstPoint      = this.curveAttributes.getOrCreateUInt32Attribute("firstPoint");
  this.restLength      = this.curveAttributes.getOrCreateScalarAttribute("restLength");
  this.closed          = this.curveAttributes.getOrCreateUInt32Attribute("closed");
  // this.resolution      = this.curveAttributes.getOrCreateUInt32Attribute("resolution");
  this.clamped         = this.curveAttributes.getOrCreateUInt32Attribute('clamped');

  this.resolutionAttributes = GeometryAttributes();
  this.positions     = this.resolutionAttributes.getOrCreateVec3Attribute("positions");
  this.segLengths    = this.resolutionAttributes.getOrCreateScalarAttribute("segLengths");
  this.distances     = this.resolutionAttributes.getOrCreateScalarAttribute("distances");
  this.colors        = this.resolutionAttributes.getOrCreateColorAttribute("colors");
  this.normals       = this.resolutionAttributes.getOrCreateVec3Attribute("normals");

  this.computeColors = true;
}

function NURBSCurve.initiate!(Mat44 cMats[], UInt32 degree) {

	// INITIATE POINTS
	if (this.resolution < 1)
    this.resolution = NURBSCurve_StandardResolution;

  this.stepSize = stepSize(this.resolution);

	this.cmats = cMats;
	this.numPoints = cMats.size();
  this.degree = Math_min(Math_max(degree,1),this.numPoints-1);

  // per point, size numPoints
  if(this.pointAttributes.size() != this.numPoints) {

  	this.pointAttributes.resize(this.numPoints);

  	// first point is always a Segment Start
  	this.isSegmentStart.values[0] = 1;
  	// last point is never a Segment Start
  	this.isSegmentStart.values[this.numPoints-1] = 0;

    this.numCurves = 0;
    for(UInt32 p=0; p<this.numPoints; p++){
      this.weights.values[p] = 1.0;
      this.numCurves += this.isSegmentStart.values[p];
    }

    this.curveAttributes.resize(1);
  }

  for(UInt32 p=0; p<this.numPoints; p++){
    this.controlMat44s.values[p] = cMats[p];
    this.controlPoints.values[p] = Vec4(cMats[p].translation().x, cMats[p].translation().y, cMats[p].translation().z, this.weights.values[p]);
  }
	
  // INITIATE CURVES
	//
  // per curve, size numCurves
  if(this.numCurves != this.curveAttributes.size()) {
  	this.curveAttributes.resize(this.numCurves);

    for(UInt32 c=0; c<this.numCurves; c++){
      // clamping curve order automatically
      this.closed.values[c] = 0;
      this.clamped.values[c] = 1;
    }
  }

	// INITIATE RESOLUTION ATTRS
	//
  // one Array, size is resolution times numCurves
  if(this.numCurves * this.resolution != this.resolutionAttributes.size()) {
    this.resolutionAttributes.resize(this.numCurves*this.resolution);
  }

	this.computeUniformKnots();

	Scalar keepArcLen = 0.0;
	Scalar keepCurveLen = 0.0;

  if(this.positions.size() >= 1000) {

    __evalPositionsTask<<<this.positions.size()>>>(this.positions.values, this, keepArcLen, keepCurveLen);
    for (UInt32 i=0;i<this.positions.size();i++)
      __evalDistancesTask(i, this.distances.values, this);
    __evalTangentsTask<<<this.normals.size()>>>(this.normals.values, this, keepArcLen, keepCurveLen);
    if(this.computeColors)
      __evalColorsTask<<<this.colors.size()>>>(this.colors.values, this, keepArcLen, keepCurveLen);
  
  } else if(this.positions.size() == NURBSCurve_StandardResolution) {

    // special case: if we have the standard resolution we can use const loops
    // which means the compiler is going to unroll them and remove the counter compute

    for (UInt32 i=0;i<NURBSCurve_StandardResolution;i++)
      __evalPositionsTask(i, this.positions.values, this, keepArcLen, keepCurveLen);

    for (UInt32 i=0;i<NURBSCurve_StandardResolution;i++) {
      __evalDistancesTask(i, this.distances.values, this);
      __evalTangentsTask(i, this.normals.values, this, keepArcLen, keepCurveLen);
    }

    if(this.computeColors) {
      for (UInt32 i=0;i<NURBSCurve_StandardResolution;i++)
        __evalColorsTask(i, this.colors.values, this, keepArcLen, keepCurveLen);
    }

  } else {

    for (UInt32 i=0;i<this.positions.size();i++)
      __evalPositionsTask(i, this.positions.values, this, keepArcLen, keepCurveLen);
    for (UInt32 i=0;i<this.positions.size();i++) {
      __evalDistancesTask(i, this.distances.values, this);
      __evalTangentsTask(i, this.normals.values, this, keepArcLen, keepCurveLen);
    }
    if(this.computeColors) {
      for (UInt32 i=0;i<this.positions.size();i++)
      __evalColorsTask(i, this.colors.values, this, keepArcLen, keepCurveLen);
    }

  }
}

/*
/// Default Constructor from Vec3 points
function NURBSCurve(Vec3 cps[], Integer degree)
{
	this.degree = degree;

	if (cps.size() < degree + 1)
		throw("NURBSCurve must have at least degree + 1 number of points");

	this.controlPoints.resize(cps.size());
	for(Size i=0; i<cps.size(); i++)
	{
		this.controlPoints[i] = Vec4(cps[i].x, cps[i].y, cps[i].z, 1.0);
	}

	this.computeUniformKnots();
}
*/
/// Get the u value from the 0-1 parameter
/// \internal




/// Sample points on curve at equally spaced parametric intervals
operator __evalPositionsTask<<<index>>>(io Vec3 results[], Ref<NURBSCurve> curve, Scalar keepArcLength, Scalar keepCurveLen) 
{	
	results[index] = curve.getPointByIndex(index, keepArcLength, keepCurveLen);
}

operator __evalOffsetPositionsTask<<<index>>>(io Vec3 results[], Ref<NURBSCurve> curve, Scalar keepArcLength, Scalar keepCurveLen, Vec3 offset, Boolean local)
{	
	results[index] = curve.getOffsetPoint(index*curve.stepSize, keepArcLength, keepCurveLen, offset, local);
}

operator __evalXfosTask<<<index>>>(io Xfo results[], Ref<NURBSCurve> curve, Scalar params[], Scalar keepArcLength, Scalar keepCurveLen, Scalar uselocalNormal, Scalar followCurveTangent, Scalar followCurveNormal, Vec3 altTangent[], Vec3 altNormal[]) 
{ 
  results[index] = curve.getXfo(params[index], keepArcLength, keepCurveLen, uselocalNormal, followCurveTangent, followCurveNormal, altTangent[index], altNormal[index]);
}

operator __evalCompressionTask<<<index>>>(io Scalar results[], Ref<NURBSCurve> curve, Ref<NURBSCurve> restCurve, Scalar params[], Scalar keepArcLength, Scalar keepCurveLen) 
{	
	results[index] = curve.getCompression(params[index], restCurve, keepArcLength, keepCurveLen);
}

/// Return colors with gradient between curve ends, sampled at equally spaced parametric intervals
operator __evalColorsTask<<<index>>>(io Color results[], io Ref<NURBSCurve> curve, Scalar keepArcLength, Scalar keepCurveLen) 
{	
	Scalar hue = mathRandomScalar(0,1);
	Scalar saturation = 3;
	results[index] = randomColor(hue*180,saturation,index*curve.stepSize); 	
}		

/// Sample tangents on curve at equally spaced parametric intervals
operator __evalTangentsTask<<<index>>>(io Vec3 results[], Ref<NURBSCurve> curve, Scalar keepArcLength, Scalar keepCurveLen) 
{	
  results[index] = curve.getFakeTangent(index*curve.stepSize,true, keepArcLength, keepCurveLen);
	// results[index] = curve.getTangent(index*curve.stepSize,true, keepArcLength, keepCurveLen);
}

/// Return accumulative distances to first point of curve, sampled at equally spaced parametric intervals
operator __evalDistancesTask<<<index>>>(io Scalar results[], Ref<NURBSCurve> curve)
{	
	results[index] = curve.getDistanceAtIndex(index);	
}	


/// Set the quat to represent the direction as the Z axis
/// and the upvector pointing along the XY plane.
inline Quat Quat.setFromTangentAndNormal!(in Vec3 tangent, in Vec3 normal) {
  Vec3 xaxis = tangent.unit();
  Vec3 zaxis = xaxis.cross(normal.unit()).cross(xaxis).unit();
  Vec3 yaxis = zaxis.cross(xaxis).unit();
  this.setFromMat33(Mat33(xaxis, yaxis, zaxis).transpose());
  return this;
}


inline Scalar stepSize(UInt32 samples)
{	
	if (samples > 0) return  1.0 / Scalar(samples - 1.0);		
	return 0.0;
}


// do a fast, binary search for the closest matching distance index
inline Scalar NURBSCurve.getClosestDistanceIndex(Scalar param, Scalar keepCurveLen) {
  // tipLength is the approximated, curvelength at incoming param t, considering attenuated restDistance
  Scalar tipLength = param*this.getCurveLength(keepCurveLen);
  Scalar low = 0,
  high = this.distances.values.size()-1;
  Scalar idx = 0;
  while (low < high) {
    idx = low + (((high - low) / 2) | 0);  
    if (this.distances.values[idx] < tipLength) {
      low = idx + 1;
    } else {
      high = idx;
    }
  }
  if (this.distances.values[idx] > tipLength) {
    idx -= 1;
  }
  return idx;
}


function Scalar NURBSCurve.arcLengthParam(Scalar param, Scalar keepArcLength, Scalar keepCurveLen) {
  
  Scalar actualLength  = this.distances.values[this.distances.values.size()-1];
  Scalar tipLength     = param*this.getCurveLength(keepCurveLen);
  Scalar nonArcLengthT = tipLength/actualLength;

  if (keepArcLength == 0) {
    return nonArcLengthT;
  }
  Scalar idx = this.getClosestDistanceIndex(param, keepCurveLen);

  // from the distance index, extrapolate 
  Scalar lengthBefore = this.distances.values[idx];
  Scalar arcLenghtT   = (idx + (tipLength - lengthBefore) / (this.distances.values[idx + 1] - lengthBefore)) / (this.distances.values.size()-1);
  
  // return lerped parameterization using the blend value keepArcLength
  return (keepArcLength*arcLenghtT) + (1.0-keepArcLength)*nonArcLengthT;
}


/// Get the u value from the 0-1 parameter
/// \internal
inline Scalar NURBSCurve.uFromParam(Scalar param, Scalar keepArcLength, Scalar keepCurveLen)
{	

    Scalar keepArcLengthClamped = Scalar(Math_clamp(keepArcLength, 0, 1 ));
	Scalar arcLenT = 0;
	// linear mapping t->u
	if (keepArcLengthClamped > 0) {
		arcLenT =  this.arcLengthParam(param, keepArcLengthClamped, keepCurveLen);
		return  this.knots[0] + arcLenT * ( this.knots[this.knots.size() - 1] - this.knots[0] );
	}
	return  this.knots[0] + param * ( this.knots[this.knots.size() - 1] - this.knots[0] );
	
}



/*
/// TODO: Rebuild the Curve with another amounts of points or at a different degree.
function NURBSCurve NURBSCurve.rebuildCurve(Size spans, Size degree)
{
	// TODO: This is actually inaccurate. The point shouldn't be taken from the curve
	// 		 but should be sampled along the "cp" points so the shape is preserved
	Vec3 cps[];
	cps.resize(spans);
	for(Size i=0; i<spans; i++)
		cps[i] = this.getPoint(i);

	return NURBSCurve(cps, degree);
}
*/
///	Compute the knots for the NURBSCurve so they are uniformly distributed
/// \internal
function NURBSCurve.computeUniformKnots!()
{
	// TODO: This seems non-uniform in the results? Test some more!

	UInt32 counter = 0;
	UInt32 knotsSize = this.degree + this.controlPoints.values.size() + 1;

  if(knotsSize != this.knots.size()) {
  	this.knots.resize(knotsSize);

  	for(UInt32 i=0; i<knotsSize; i++)
  	{

  		// Degree + 1 at start of 0 knots to clamp the curve
  		if (i <= this.degree)
  			this.knots[i] = 0;

  		// Degree + 1 at the end of the highest knots value to clamp the curve
  		else if (i > knotsSize - this.degree - 1)
  			this.knots[i] = counter;

  		// Otherise increase knot gradually
  		else
  			this.knots[i] = ++counter;	

  	}
  }

  Size numSpans = this.resolutionAttributes.size();
  if(this.spans.size() != numSpans) {
    this.basises.resize(numSpans * NURBSCurve_MaxDegree);
    this.spans.resize(numSpans);

    for(UInt32 i=0;i<numSpans;i++) {
      Scalar u = Scalar(i)*this.stepSize;
      this.spans[i] = NURBSUtils_findSpan(this.degree, u, this.knots);
      Scalar basis[] = NURBSUtils_calcBasisFunctions(this.spans[i], u, this.degree, this.knots);
      for(Size j=0;j<basis.size();j++)
        this.basises[i*NURBSCurve_MaxDegree+j] = basis[j];
    }
  }
}


// returns distance from begginning of curve to curve end
// asssumes positions to have been set
inline Scalar NURBSCurve.getDistanceAtIndex(UInt32 index) {
	Vec3 p_prev;
	// Accumulatively store lengths in distance array
	// the last value is the total approximated length of the curve
	if (index == 0) {
		return 0;
	} else {
		return this.distances.values[index-1] + this.positions.values[index].distanceTo(this.positions.values[index-1]);
	}
}	



/// POSITION

inline Vec3 NURBSCurve.getPoint(Scalar u) {
	// following results in (wx, wy, wz, w) homogeneous point
	Vec4 hpoint = NURBSUtils_calcBSplinePoint( this.degree, this.knots, this.controlPoints.values, u );
	// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)
	return hpoint.makeHomogeneousVec3();
}

/// Return a point on the curve
/// \param param Parameter on curve between 0-1
function Vec3 NURBSCurve.getPoint(Scalar param, Scalar keepArcLength, Scalar keepCurveLen)
{
	Scalar u = this.uFromParam(param,keepArcLength,keepCurveLen);
  return this.getPoint(u);
}

/// Return a point on the curve
/// \param param Parameter on curve between 0-1
function Vec3 NURBSCurve.getPointByIndex(Index index, Scalar keepArcLength, Scalar keepCurveLen)
{
  Scalar param = index * this.stepSize;
  Scalar u = this.uFromParam(param,keepArcLength,keepCurveLen);

  // following results in (wx, wy, wz, w) homogeneous point
  Vec4 hpoint = NURBSUtils_calcBSplinePoint( this.degree, this.knots, this.controlPoints.values, u, this.spans[index], this.basises, index * NURBSCurve_MaxDegree );

  // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)
  return hpoint.makeHomogeneousVec3();
}

/// Returns a point offset from the original curve by a Vec3 
/// \param param Parameter on curve between 0-1
function Vec3 NURBSCurve.getOffsetPoint(Scalar param, Scalar keepArcLength, Scalar keepCurveLen, Vec3 offset, Boolean local)
{	
	Scalar u = this.uFromParam(param,keepArcLength,keepCurveLen);
	Quat quat;
	Vec4 offsetPoints[];
	Vec3 localOffset = offset;
	offsetPoints.resize(this.numPoints);
	// offset Points by Vector, consider local rotation
	for(UInt32 p=0; p<this.numPoints; p++) {
		// rotate local if 
		if (local) 
		{
			quat = Quat(this.cmats[p].upperLeft());
			quat = quat.unit_safe();
			localOffset = quat.rotateVector(offset);
		}
		offsetPoints[p].x = this.controlPoints.values[p].x + localOffset.x;
		offsetPoints[p].y = this.controlPoints.values[p].y + localOffset.y;
		offsetPoints[p].z = this.controlPoints.values[p].z + localOffset.z;
		offsetPoints[p].t = this.weights.values[p];
	}
	// following results in (wx, wy, wz, w) homogeneous point
	Vec4 hpoint = NURBSUtils_calcBSplinePoint( this.degree, this.knots, offsetPoints, u );
	// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)
	return hpoint.makeHomogeneousVec3();
}	

/// ORIENTATION
/// Return the tangent vector at a given parameter
/// no derivative look-up, just calculates the tangent between two points
function Vec3 NURBSCurve.getFakeTangent(Scalar param, Boolean normalize, Scalar keepArcLength, Scalar keepCurveLen)
{
	Scalar epsilon = 0.0001;

	Scalar u = this.uFromParam(param,keepArcLength,keepCurveLen);

	// following results in (wx, wy, wz, w) homogeneous point
	Vec4 hpointA = NURBSUtils_calcBSplinePoint( this.degree, this.knots, this.controlPoints.values, u+epsilon);
	Vec4 hpointB = NURBSUtils_calcBSplinePoint( this.degree, this.knots, this.controlPoints.values, u-epsilon);

  // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)
  Vec3 tangent =  hpointA.makeHomogeneousVec3() - hpointB.makeHomogeneousVec3(); 

	if (normalize)
		return tangent.unit_safe();
	else
		return tangent;
}

/// Return the tangent vector at a given parameter
/// Calculated using the NURBS Derivative of that parameter on the curve.
function Vec3 NURBSCurve.getTangent(Scalar param, Boolean normalize, Scalar keepArcLength, Scalar keepCurveLen) {
	Vec3 tangent = this.getFakeTangent(param,normalize,keepArcLength,keepCurveLen);
	return tangent;
	/// needs to be revised - doesn't exactly match the tangent we need going for approximate tangent right now
	// Scalar u = this.uFromParam(param,keepArcLength,keepCurveLen);

	// Vec4 ders[] = NURBSUtils_calcNURBSDerivatives( this.degree, this.knots, this.controlPoints.values, u, 1 );
	// Vec3 tangent = ders[1].clone().xyz();

	// if (normalize)
	// 	return tangent.unit_safe();
	// else
	// 	return tangent;
}




function Vec3 NURBSCurve.getNormal(Scalar param, Boolean normalize, Scalar keepArcLength, Scalar keepCurveLen) {
	Vec3 normalDir = Vec3(0,0,1);
	Vec3 normal = this.getOffsetPoint(param, keepArcLength, keepCurveLen, normalDir, true) - this.getPoint(param, keepArcLength, keepCurveLen);

	if (normalize)
		return normal.unit();
	else
		return normal;
}

function Vec3 NURBSCurve.getNormal(Scalar param) {
	Scalar keepArcLength = 0.0;
	Scalar keepCurveLen = 0.0;
	Boolean normalize = true;
	return this.getNormal(param, normalize, keepArcLength, keepCurveLen);
}


function Quat NURBSCurve.getOri(Scalar param, Scalar keepArcLength, Scalar keepCurveLen,  Scalar uselocalNormal, Scalar followCurveTangent, Scalar followCurveNormal, Vec3 altTangent, Vec3 altNormal)
{
	Vec3 pointOnCurve = this.getPoint(param,keepArcLength, keepCurveLen);
	Quat ori;
	Vec3 normal, tangent;

	Vec3 altNormalSafe = altNormal;
	Vec3 altTangentSafe = altTangent;
	// fallback for zero Length vectors
	if (altTangent.length() == 0) {
    	altTangentSafe = Vec3(1,0,0);
    }
	if (altNormal.length() == 0) {
    	altNormalSafe = Vec3(0,0,1);
	}

	// Tangent Vector
    if (followCurveNormal > 0.0) {
    	Vec3 nonLocalNormal;
    	Vec3 localNormal;
		// need localNormal if smaller than 1
		// if (uselocalNormal < 1) {
			Vec3 pointOnOffset = this.getOffsetPoint(param, keepArcLength, keepCurveLen, Vec3(0,0,1), true);
			localNormal = pointOnOffset - pointOnCurve;
		// }
		// need nonLocalNormal if larger than 0
		// if (uselocalNormal > 0) {
			Xfo XfoA, XfoB;
			XfoA.setFromMat44(this.cmats[0]);
		  	XfoB.setFromMat44(this.cmats[this.cmats.size()-1]);
		  	Quat nonLocalOri = XfoA.ori.sphericalLinearInterpolate(XfoB.ori, param);
			nonLocalNormal = nonLocalOri.getZaxis();
		// }

		if (uselocalNormal <= 0 ) {
			normal = nonLocalNormal;
		} else if (uselocalNormal >= 1 ) {
			normal = localNormal;
		} else {
			normal = nonLocalNormal*(1-uselocalNormal) + localNormal*uselocalNormal;
		}

		// calculate the final normal
		normal = altNormalSafe*(1-followCurveNormal) + normal*followCurveNormal;
    } else {
      	normal = altNormalSafe;
    }

	// Tangent Vector
	Vec3 curveTangent = this.getTangent(param, true, keepArcLength, keepCurveLen);
	tangent = altTangentSafe*(1-followCurveTangent) + curveTangent*followCurveTangent;

	return ori.setFromTangentAndNormal(tangent, normal);
}

function Quat NURBSCurve.getOri(Scalar t, Scalar keepArcLength, Scalar keepCurveLen) {
	// Scalar arcLenT =  this.arcLengthParam(t, keepArcLength, keepRestLength);
	Scalar uselocalNormal = 1.0;
	Scalar followCurveTangent = 1;
	Scalar followCurveNormal = 1;
	Vec3 altTangent = Vec3(1,0,0);
	Vec3 altNormal = Vec3(0,0,1);

	return this.getOri(t, keepArcLength, keepCurveLen,  uselocalNormal, followCurveTangent, followCurveNormal, altTangent, altNormal);
}

function Quat NURBSCurve.getOri(Scalar t) {
	Scalar keepArcLength = 0.0;
	Scalar keepCurveLen = 0.0;
	Scalar uselocalNormal = 1.0;
	Scalar followCurveTangent = 1;
	Scalar followCurveNormal = 1;
	Vec3 altTangent = Vec3(1,0,0);
	Vec3 altNormal = Vec3(0,0,1);
	return this.getOri(t, keepArcLength, keepCurveLen,  uselocalNormal, followCurveTangent, followCurveNormal, altTangent, altNormal);
}


function Xfo NURBSCurve.getXfo(Scalar param, Scalar keepArcLength, Scalar keepCurveLen)
{
    return Xfo(
    	this.getPoint(param,keepArcLength, keepCurveLen),
        this.getOri(param,  keepArcLength, keepCurveLen),
        this.getScale(param,keepArcLength, keepCurveLen)
    );
}

function Xfo NURBSCurve.getXfo(Scalar param, Scalar keepArcLength, Scalar keepCurveLen, Scalar uselocalNormal, Scalar followCurveTangent, Scalar followCurveNormal, Vec3 altTangent, Vec3 altNormal)
{	
	Vec3 pointOnCurve = this.getPoint(param,keepArcLength, keepCurveLen);
	// Todo: optimize this - we already have calculated the pointOnCurve, getOri does that again.

	Quat ori = this.getOri(param, keepArcLength, keepCurveLen, uselocalNormal, followCurveTangent, followCurveNormal, altTangent, altNormal);

    return Xfo(
    	pointOnCurve,
        ori,
        this.getScale(param,keepArcLength, keepCurveLen)
    );
}


/// Return curve frame normal samples
/// Based on: "Parallel Transport Approach to Curve Framing"
function NURBSCurve.parallelFramesNormals(in UInt32 samples,
										 in Vec3 upVec,
										 out Vec3 normals[] ) {
  // TODO: Test this! :)
  normals.resize(samples);
  Vec3 prevNorm = upVec.unit();
  Vec3 tangent;
  Vec3 cross;

  Scalar step = stepSize(samples);

  for(UInt32 i=0; i<samples; i++)
  {
  	tangent = this.getTangent(step*i, true, 0.0, 0.0);
  	cross = prevNorm.cross(tangent);
  	prevNorm = tangent.cross(cross).unit();
  	normals[i] = prevNorm;
  }
}


/// Return curve frame Xfo samples
/// Based on: "Parallel Transport Approach to Curve Framing"
function NURBSCurve.parallelFrames(out Xfo xfos[],
								   in UInt32 samples,
								   in Vec3 upVec,
								   Scalar keepArcLength, Scalar keepCurveLen)
{
	// TODO: Test this! :)
	xfos.resize(samples);
  	Vec3 prevNorm = upVec.unit();
  	Vec3 tangent;
  	Vec3 normal;
  	Vec3 cross;
  	Vec3 pt;
  	// Scalar step = this.knots[this.knots.size()-1] / Scalar(samples-1);
	Scalar step = stepSize(samples);

  	for(UInt32 i=0; i<samples; i++)
  	{	
  		tangent = this.getTangent(step*i, true, keepArcLength, keepCurveLen);
  		cross = prevNorm.cross(tangent);
  		prevNorm = tangent.cross(cross).unit();
  		normal = prevNorm;
  		pt = this.getPoint(step*i, keepArcLength, keepCurveLen);

		Quat quat;
		quat.setFromTangentAndNormal(tangent, normal);

		xfos[i] = Xfo(pt, quat);
  	}
}

/*

inline Scalar closestPointToLineRatio(in Vec3 P, in Vec3 lineP0, in Vec3 lineP1) {
  Vec3 v, w, Pb;
  Scalar c1, c2, b;
  v = lineP1 - lineP0;
  if (v.length() < 0.00001) return 0;
  w = P - lineP0;

  c1 = w.dot(v);
  c2 = v.dot(v);
  if(c2 < 1e-10)//squared epsilon
    return 0.0;
  return c1 / c2;
}
*/

inline Scalar getthis(in Scalar u, in Vec4 e[], in Vec3 d){
	Vec3 e1 = e[1].xyz();
	Vec3 e2 = e[2].xyz();
	Scalar f1 = e1.dot(d); //verb_core_Vec.dot(e1[1],d);
	Scalar s0 = e2.dot(d); //verb_core_Vec.dot(e1[2],d);
	Scalar s1 = e1.dot(e1); // verb_core_Vec.dot(e1[1],e1[1]);
	Scalar df = s0 + s1;
	return u - f1 / df;
}


// Todo get closest Param to Point on a rational Curve
function Scalar NURBSCurve.getClosestParam(in Vec3 p) {
	Scalar min = + SCALAR_INFINITE;
	Scalar u = 0.0;

	UInt32 _g1 = 0;
	UInt32 _g = this.positions.size() - 1;
	while(_g1 < _g) {
		UInt32 i1 = _g1++;
		Scalar u0  = Scalar(i1)/Scalar(_g);
		Scalar u11 = Scalar(i1+1)/Scalar(_g);
		Vec3 p0 = this.positions.values[i1];
		Vec3 p1 = this.positions.values[i1 + 1];
		Scalar ratio = closestPointToLineRatio(p,p0,p1);
		Scalar d1 = (p - p1).length();
		if(d1 < min) {
			min = d1;
			u = u0.linearInterpolate(u11,ratio);
		}
	}
	// return u;

	UInt32 maxits = 5;
	UInt32 i = 0;
	Scalar eps1 = 0.0001;
	Scalar eps2 = 0.0005;
	Vec3 dif;
	Scalar minu = this.knots[0];
	Scalar maxu = this.knots[(this.knots.size() -1 )];
	Boolean closed = false; // verb_core_Vec.normSquared(verb_core_Vec.sub(this.controlPoints[0],verb_core_ArrayExtensions.last(this.controlPoints))) < verb_core_Constants.EPSILON;
	
	Scalar cu = u;
	while(i < maxits) {
		// calculate derivatives
		Vec4 e[] = NURBSUtils_calcNURBSDerivatives( this.degree, this.knots, this.controlPoints.values, cu, 2 );
		Vec3 e0 = e[0].xyz();
		Vec3 e1 = e[1].xyz();
		Vec3 e2 = e[2].xyz();
		dif = e0 - p;
		Scalar c1v = dif.length();
		Scalar c2n = e1.dot(dif);
		Scalar c2d = e1.length() * c1v;
		Scalar c2v = c2n / c2d;
		Boolean c1 = c1v < eps1;
		Boolean c2 = abs(c2v) < eps2;
		
		//if both tolerances are met
		if(c1 && c2) return cu;

		Scalar ct = getthis(cu,e,dif);
		//are we outside of the bounds of the curve?
		if(ct < minu) if(closed) ct = maxu - (ct - minu); else ct = minu; else if(ct > maxu) if(closed) ct = minu + (ct - maxu); else ct = maxu;
		Scalar c3v = ((ct - cu)*e1).length();
		if(c3v < eps1) {
			return cu;
		}
		cu = ct;
		i++;
	}
	return cu;
}


function Vec3 NURBSCurve.getClosestPoint(in Vec3 p) {
	Scalar closestU = this.getClosestParam(p);
	return this.getPoint(closestU);
}

// Create a parametrization for a point (needs to be generalized)
function Vec4 NURBSCurve.pointParam(in Vec3 p) {
	Vec4 param;
	Scalar closestU = this.getClosestParam(p);
	Vec3 offsetVec = p - this.getPoint(closestU);
	param.x = offsetVec.x;
	param.y = offsetVec.y;
	param.z = offsetVec.z;
	param.t = closestU;
	return param;
}


/// Return curve frame normal samples
/// Based on: "Parallel Transport Approach to Curve Framing"
/// SCALE

function Vec3 NURBSCurve.getScale(Scalar t, Xfo xfoA, Xfo xfoB) {
	Vec3 blend = xfoA.sc.linearInterpolate(xfoB.sc, t);
	// We assume x as the down-axis and normalize it.
	blend.x = 1;
	return blend;
}

function Vec3 NURBSCurve.getScale(Scalar param, Scalar keepArcLength, Scalar keepCurveLen) {
	Scalar u = this.uFromParam(param,keepArcLength,keepCurveLen);
	return this.getScale(u);
}

function Vec3 NURBSCurve.getScale(Scalar t) {
	Xfo XfoA, XfoB;
	XfoA.setFromMat44(this.cmats[0]);
  	XfoB.setFromMat44(this.cmats[this.cmats.size()-1]);
	return this.getScale(t, XfoA, XfoB);
}

function Scalar NURBSCurve.getCompression(Scalar param, NURBSCurve referenceCurve, Scalar keepArcLength, Scalar keepCurveLen) {
  Scalar u = this.uFromParam(param,keepArcLength,keepCurveLen);
  return this.getCompression(u,referenceCurve);
}


function Scalar NURBSCurve.getCompression(Scalar t, NURBSCurve referenceCurve) {
  Scalar keepCurveLen = 0;
  UInt32 index = this.getClosestDistanceIndex(t,keepCurveLen)+1;
  Scalar lengthSample = this.distances.values[index];
  Scalar lengthSampleRef = referenceCurve.distances.values[index];
  if(lengthSample == 0) return 1.0;
  return lengthSampleRef/lengthSample;
}


/// LENGTH

inline Scalar NURBSCurve.getCurveLength(Scalar keepCurveLen) {
  UInt32 s = this.distances.values.size();
  if (keepCurveLen==0) return this.distances.values[s-1];
  return  (1-keepCurveLen)*(this.distances.values[s-1]) + keepCurveLen*this.restLength.values[0];
}
