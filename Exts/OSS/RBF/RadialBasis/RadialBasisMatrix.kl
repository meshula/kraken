
//
// Copyright (c) 2010-2016, Fabric Software Inc. All rights reserved.
//

require JSON;

/// \dfgPresetOmit
object RadialBasisMatrix{
  UInt32 rows; // X
  UInt32 cols; // Y
  RadialBasisArray matrix;
  RadialBasisMatrix lu;
  Boolean transposed;
  Boolean singular;
  Boolean even;
};

/// \dfgPresetOmit
inline RadialBasisMatrix()
{
  this.rows = this.cols = 0;
  this.transposed = false;
}

/// \dfgPresetOmit
inline RadialBasisMatrix(UInt32 dim)
{
  this.cols = dim;
  this.rows = dim;
  this.matrix.resize(dim * dim);
  this.transposed = false;
}

/// \dfgPresetOmit
inline RadialBasisMatrix(UInt32 row, UInt32 col)
{
  this.rows = row;
  this.cols = col;
  this.transposed = false;
  this.matrix.resize(row * col);
}

/// Constructor taking dimensions as well as matrix data
/// \dfgPresetOmit
inline RadialBasisMatrix(UInt32 row, UInt32 col, RadialBasisArray matrix)
{
  if (row * col != matrix.size())
    throw("provided values are not of size row * col");
  this.rows = row;
  this.cols = col;
  this.matrix = matrix.clone();
}

/// Constructor taking an array of rows
/// \dfgPresetOmit
inline RadialBasisMatrix(RadialBasisArray array[])
{
  if(array.size())
    throw("matrix size can't be zero");

  Size cols = array[0].size();
  for(Size i=0;i<array.size();i++) {
    if(array[i].size() == 0)
      throw("matrix size can't be zero");
    if(cols != array[i].size())
      throw("all rows have to have the same size");
  }

  this.rows = array.size();
  this.cols = cols;
  this.transposed = false;

  this.matrix.resize(this.rows * this.cols);
  for(Size i=0;i<array.size();i++)
    for(Size j=0;j<array[i].size();j++)
      this.matrix.f[this.getID(i, j)] = array[i].f[j];
}

/// \dfgPresetOmit
function JSONDictValue RadialBasisMatrix.toJSON()
{
  JSONDictValue data();

  JSONNumberValue rows(this.rows);
  data.set("rows", rows);
  JSONNumberValue cols(this.cols);
  data.set("cols", cols);

  JSONBooleanValue transposed(this.transposed);
  data.set("transposed", transposed);
  JSONBooleanValue singular(this.singular);
  data.set("singular", singular);
  JSONBooleanValue even(this.even);
  data.set("even", even);

  JSONArrayValue matrix();
  matrix.resize(this.matrix.size());
  for (Index i = 0; i < this.matrix.size(); i++)
    matrix.setScalar(i, this.matrix.f[i]);
  data.set("matrix", matrix);

  return data;
}

/// \dfgPresetOmit
function RadialBasisMatrix.fromJSON!(JSONDictValue matrixData)
{
  if (matrixData.has("rows")) {
    this.rows = matrixData.getInteger('rows');
  }
  if (matrixData.has("cols")) {
    this.cols = matrixData.getInteger('cols');
  }
  if (matrixData.has("transposed")) {
    this.transposed = matrixData.getBoolean('transposed');
  }
  if (matrixData.has("singular")) {
    this.singular = matrixData.getBoolean('singular');
  }
  if (matrixData.has("even")) {
    this.even = matrixData.getBoolean('even');
  }
  if (matrixData.has("matrix")) {
    JSONArrayValue matrix = matrixData.get("matrix");
    this.matrix.resize(matrix.size());
    for (Index i = 0; i < matrix.size(); i++)
      this.matrix.f[i] = matrix.getScalar(i);
  }
}

/// \dfgPresetOmit
inline RadialBasisMatrix RadialBasisMatrix.copy ? ()
{
  RadialBasisMatrix m(this.cols, this.rows);
  m.transposed = this.transposed;
  m.matrix = this.matrix.clone();
  return m;
}

/// \dfgPresetOmit
inline RadialBasisMatrix.transpose!()
{
  this.transposed = !this.transposed;
  UInt32 temp = this.rows;
  this.rows = this.cols;
  this.cols = temp;
}

/// \dfgPresetOmit
inline UInt32 RadialBasisMatrix.getID(UInt32 row, UInt32 col)
{
  if (col < this.cols && row < this.rows)
    if (this.transposed)
      return this.rows * col + row;
    else
      return this.cols * row + col;
  else
    throw "index out of bound";
}

/// \dfgPresetOmit
inline UInt32 RadialBasisMatrix.getColFromIndex(UInt32 index)
{
  if (index < this.matrix.size())
    return index % this.cols;
  else
    throw "index out of bound";
}

/// \dfgPresetOmit
inline UInt32 RadialBasisMatrix.getRowFromIndex(UInt32 index)
{
  if (index < this.matrix.size())
    return (index + 1 - this.getColFromIndex(index)) / this.cols;
  else
    throw "index out of bound";
}

/// \dfgPresetOmit
inline RadialBasisMatrix.set!(UInt32 row, UInt32 col, Float32 v)
{
  this.matrix.f[this.getID(row, col)] = v;
}

/// \dfgPresetOmit
inline Float32 RadialBasisMatrix.get(UInt32 row, UInt32 col)
{
  return this.matrix.f[this.getID(row, col)];
}

/// \dfgPresetOmit
function RadialBasisArray RadialBasisMatrix.getRow(UInt32 row)
{
  if (row < this.rows)
  {
    RadialBasisArray nRow(this.cols);
    for (UInt32 i; i < this.cols; i++)
      nRow.f[i] = this.get(row, i);
    return nRow;
  }
  else
  {
    throw "index out of bound";
  }
}

/// \dfgPresetOmit
function RadialBasisArray RadialBasisMatrix.getRowsMin()
{
  RadialBasisArray minimums(this.rows);
  for (UInt32 i; i < this.rows; i++)
    minimums.f[i] = this.getRow(i).getMinimum();
  return minimums;
}

/// \dfgPresetOmit
function RadialBasisArray RadialBasisMatrix.getColsMin()
{
  RadialBasisArray minimums(this.cols);
  for (UInt32 i; i < this.cols; i++)
    minimums.f[i] = this.getCol(i).getMinimum();
  return minimums;
}

/// \dfgPresetOmit
function RadialBasisArray RadialBasisMatrix.getRowsMax()
{
  RadialBasisArray maximums(this.rows);
  for (UInt32 i; i < this.rows; i++)
    maximums.f[i] = this.getRow(i).getMaximum();
  return maximums;
}

/// \dfgPresetOmit
function RadialBasisArray RadialBasisMatrix.getColsMax()
{
  RadialBasisArray maximums(this.cols);
  for (UInt32 i; i < this.cols; i++)
    maximums.f[i] = this.getCol(i).getMaximum();
  return maximums;
}

/// \dfgPresetOmit
inline RadialBasisMatrix.setRow!(UInt32 y, RadialBasisArray row)
{
  if (y < this.rows && row.size() == this.cols)
  {
    for (UInt32 i; i < this.cols; i++)
      this.matrix.f[this.getID(y, i)] = row.f[i];
  }
  else
  {
    throw "index " + y + " out of bound";
  }
}

/// \dfgPresetOmit
inline RadialBasisArray RadialBasisMatrix.getCol(UInt32 col)
{
  if (col < this.cols)
  {
    RadialBasisArray column(this.rows);
    for (UInt32 i; i < this.rows; i++)
      column.f[i] = this.get(i, col);
    return column;
  }
  else
  {
    throw "index out of bound";
  }
}

/// \dfgPresetOmit
inline RadialBasisMatrix.setCol!(Float32 x, RadialBasisArray column)
{
  if (x < this.cols && column.size() == this.rows)
  {
    for (UInt32 i; i < this.rows; i++)
      this.matrix.f[this.getID(i, x)] = column.f[i];
  }
  else
  {
    throw "index out of bound";
  }
}

/// \dfgPresetOmit
inline RadialBasisMatrix.pushRow!(RadialBasisArray row)
{
  this.rows += 1;
  UInt32 originalSize = this.matrix.size();
  this.matrix.resize(originalSize + row.size());
  for (UInt32 i=0 ; i < row.size(); i++)
    this.matrix.f[this.getID(this.rows - 1, i)] = row.f[i];
}

/// \dfgPresetOmit
inline RadialBasisMatrix.pushRowArray!(RadialBasisArray rows)
{
  Size nbRows = rows.size() / this.cols;
  UInt32 prevRows = this.rows;
  this.rows += nbRows;
  UInt32 originalSize = this.matrix.size();
  this.matrix.resize(originalSize + rows.size());
  Index offset = 0;
  for (UInt32 row=0; row < nbRows; row++)
    for (UInt32 col=0 ; col < this.cols; col++)
      this.matrix.f[this.getID(prevRows+row, col)] = rows.f[offset++];
}

/// \dfgPresetOmit
inline RadialBasisArray RadialBasisMatrix.popRow!()
{
  this.rows -= 1;
  RadialBasisArray row = this.matrix.getTail(this.cols);
  this.matrix.resize(this.rows * this.cols);
  return row;
}

/// \dfgPresetOmit
inline RadialBasisMatrix +(RadialBasisMatrix a, RadialBasisMatrix b)
{
  RadialBasisMatrix result(a.rows, b.cols);
  if (b.rows != a.cols)
    throw "invalid matrices size";

  for (UInt32 i = 0; i < a.rows; i++)
    for (UInt32 j = 0; j < a.cols; j++)
      result.matrix.f[result.getID(i,j)] = a.get(i, j) + b.get(i, j);

  return result;
}


/// \dfgPresetOmit
inline RadialBasisMatrix -(RadialBasisMatrix a, RadialBasisMatrix b)
{
  RadialBasisMatrix result(a.rows, b.cols);
  if (b.rows != a.cols)
    throw "invalid matrices size";

  for (UInt32 i = 0; i < a.rows; i++)
    for (UInt32 j = 0; j < a.cols; j++)
      result.matrix.f[result.getID(i,j)] = a.get(i, j) - b.get(i, j);

  return result;
}

operator matrixMultiplyTask(Index i, RadialBasisMatrix a, RadialBasisMatrix b, io RadialBasisMatrix result)
{
  for (UInt32 k = 0; k < b.cols; k++)
    for (UInt32 j = 0; j < a.cols; j++)
      result.matrix.f[result.getID(i,j)] += a.get(i, k) * b.get(k, j);
}

/// \dfgPresetOmit
inline RadialBasisMatrix *(RadialBasisMatrix a, RadialBasisMatrix b)
{
  RadialBasisMatrix result(a.rows, b.cols);
  if (b.rows != a.cols)
    throw "invalid matrices size";

  //matrixMultiplyTask<<<a.rows>>>(a,  b, result);
  for (UInt32 i = 0; i < a.rows; i++)
    for (UInt32 k = 0; k < b.cols; k++)
      for (UInt32 j = 0; j < a.cols; j++)
          result.matrix.f[result.getID(i,j)] += a.get(i, k) * b.get(k, j);

  return result;
}

/// \dfgPresetOmit
inline RadialBasisMatrix *(RadialBasisMatrix a, RadialBasisArray b)
{
  RadialBasisMatrix result(a.rows, 1);
  Float32 product;
  if (b.size() != a.cols)
    throw "invalid matrices size";

  for (UInt32 i = 0; i < a.rows; i++)
  {
    product = 0;
    for (UInt32 j = 0; j < a.cols; j++)
      product += a.get(i, j) * b.f[j];
    result.set(i, 0, product);
  }
  return result;
}

/// \dfgPresetOmit
inline RadialBasisMatrix *(RadialBasisMatrix a, Float32 b)
{
  RadialBasisMatrix result = a.copy();
  for (UInt32 i = 0; i < result.matrix.size(); i++)
    result.matrix.f[i] *= b;
  return result;
}

/// \dfgPresetOmit
function RadialBasisMatrix RadialBasisMatrix.multiply(RadialBasisMatrix m)
{
  return (this * m);
}


/// \dfgPresetOmit
function RadialBasisMatrix RadialBasisMatrix.multiply(RadialBasisArray m)
{
  return (this * m);
}

/// \dfgPresetOmit
function RadialBasisMatrix.swapRows!(UInt32 a, UInt32 b)
{
  for (UInt32 i; i < this.cols; i++)
    this.matrix.f.swap(a * this.cols + i, b * this.cols + i);
}

/// \dfgPresetOmit
function RadialBasisMatrix.swapCols!(UInt32 a, UInt32 b)
{
  for (UInt32 i; i < this.rows; i++)
    this.matrix.f.swap(this.cols * i + a, this.cols * i + b);
}

/// \dfgPresetOmit
function RadialBasisMatrix RadialBasisMatrix.inverse!()
{
  UInt32 piv[];
  piv.resize(this.cols);
  RadialBasisMatrix LU = this.luDecomposition(piv);
  RadialBasisMatrix inv(this.cols, this.cols);
  for (UInt32 i = 0; i < this.cols; i++)
  {
    RadialBasisArray b(this.cols);
    RadialBasisArray w(this.cols);
    b.f[i] = 1.0;
    LU.solveLU(piv, b, w);
    inv.setCol(i, w);
  }
  return inv;
}

/// Licensed to the Apache Software Foundation (ASF) under one or more
/// contributor license agreements.  See the NOTICE file distributed with
/// this work for additional information regarding copyright ownership.
/// The ASF licenses this file to You under the Apache License, Version 2.0
/// (the "License"); you may not use this file except in compliance with
/// the License.  You may obtain a copy of the License at
///
///      http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Calculates the LUP-decomposition of a square matrix.
/// The LUP-decomposition of a matrix A consists of three matrices L, U and
/// P that satisfy: P*A = L*U. L is lower triangular (with unit
/// diagonal terms), U is upper triangular and P is a permutation matrix. All
/// matrices are m*m.</p>
/// As shown by the presence of the P matrix, this decomposition is
/// implemented using partial pivoting.
/// This class is based on the class with similar name from the
/// "http://math.nist.gov/javanumerics/jama/" library.
///
///   converted the java code to KL using a RadialBasisMatrix struct
///
/// @see "http://mathworld.wolfram.com/LUDecomposition.html"
/// @see "http://en.wikipedia.org/wiki/LU_decomposition"
/// @since 2.0 (changed to concrete class in 3.0)
/// \dfgPresetOmit
function Float32 RadialBasisMatrix.getDeterminant(UInt32 pivot[]) {
  if (this.singular)
    return 0;
  else
  {
    UInt32 m = pivot.size();
    Float32 determinant = this.even ? 1 : -1;
    for (UInt32 i = 0; i < m; i++)
      determinant *= this.lu.get(i, i);
    return determinant;
  }
}

/// \dfgPresetOmit
function RadialBasisMatrix RadialBasisMatrix.luDecomposition!(io UInt32 pivot[]) {

  Float32 singularityThreshold = 0;
  if (this.cols != this.rows)
    throw "NonSquareRadialBasisMatrixException";

  Size m = this.cols;
  RadialBasisMatrix lu = this.copy();

  // Initialize permutation array and parity
  for (UInt32 row = 0; row < m; row++)
    pivot[row] = row;
  
  this.even = true;
  this.singular = false;

  // Loop over columns
  for (UInt32 col = 0; col < m; col++) {

    // upper
    for (UInt32 row = 0; row < col; row++) {
      RadialBasisArray luRow = lu.getRow(row);
      Float32 sum = luRow.f[col];
      for (UInt32 i = 0; i < row; i++)
        sum -= luRow.f[i] * lu.get(i, col);

      lu.set(row, col, sum);
    }

    // lower
    UInt32 max = col; // permutation row
    Float32 largest = -1e100;
    for (UInt32 row = col; row < m; row++) {
      RadialBasisArray luRow = lu.getRow(row);
      Float32 sum = luRow.f[col];
      for (UInt32 i = 0; i < col; i++)
        sum -= luRow.f[i] * lu.get(i, col);
      
      lu.set(row, col, sum);

      // maintain best permutation choice
      if (abs(sum) > largest) {
        largest = abs(sum);
        max = row;
      }
    }

    // Singularity check
    if (abs(lu.get(max, col)) < singularityThreshold)
      throw ("The matrix is singular!");

    // Pivot if necessary
    if (max != col) {
      lu.swapRows(max, col);
      pivot.swap(max, col);
      this.even = !this.even;
    }

    // Divide the lower elements by the "winning" diagonal elt.
    Float32 luDiag = lu.get(col, col);
    for (UInt32 row = col + 1; row < m; row++)
      lu.matrix.f[row * m + col] = lu.get(row, col) / luDiag;
  }
  this.lu = lu;
  return (lu);
}

/// \dfgPresetOmit
function RadialBasisMatrix.solveLU(UInt32 pivot[], io RadialBasisArray b, io RadialBasisArray x) {

  UInt32 m = pivot.size();
  if (this.cols != m)
    throw "DimensionMismatchException";
  if (this.singular)
    throw "SingularRadialBasisMatrixException";

  // Apply permutations to b
  for (UInt32 row = 0; row < m; row++)
    x.f[row] = b.f[pivot[row]];

  // Solve LY = b
  for (UInt32 col = 0; col < m; col++) {
    Float32 xCol = x.f[col];
    for (UInt32 i = col + 1; i < m; i++)
      x.f[i] -= xCol * this.get(i, col);
  }
  // Solve UX = Y
  for (Integer col = m - 1; col >= 0; col--) {
    x.f[col] /= this.get(col, col);
    Float32 xCol = x.f[col];
    for (UInt32 i = 0; i < col; i++)
      x.f[i] -= xCol * this.get(i, col);
  }
}

/// svdcomp - SVD decomposition routine.
/// Takes an mxn matrix a and decomposes it into udv, where u,v are
/// left and right orthogonal transformation matrices, and d is a
/// diagonal matrix of singular values.
///
/// This routine is adapted from svdecomp.c in XLISP-STAT 2.1 which is
/// code from Numerical Recipes adapted by Luke Tierney and David Betz.
///
///  converted the c code to KL using a RadialBasisMatrix struct
///
/// Input:
///   u = mxn matrix to be decomposed
///   w = returns the vector of singular values of this
///   v = returns the right orthogonal transformation matrix
/// \dfgPresetOmit
function UInt32 RadialBasisMatrix.svdDecomposition(io RadialBasisMatrix u, io RadialBasisArray w, io RadialBasisMatrix v)
{
  UInt32 flag, i, its, j, jj, k, l, nm;
  Float32 c, f, h, s, x, y, z;
  Float32 anorm = 0.0, g = 0.0, scale = 0.0;
  RadialBasisArray rv1;
  UInt32 m = this.rows; UInt32 n = this.cols;

  if (m < n)
  {
    report ("#rows must be > #cols");
    return 0;
  }

  rv1.resize(n);
  w.resize(n);
  u = this.copy();
  /* Householder reduction to bidiagonal form */
  for (i = 0; i < n; i++)
  {
    /* left-hand reduction */
    l = i + 1;
    rv1.f[i] = scale * g;
    g = s = scale = 0.0;
    if (i < m)
    {
      for (k = i; k < m; k++)
        scale += abs(u.matrix.f[this.getID(k, i)]);

      if (scale)
      {
        for (k = i; k < m; k++)
        {
          u.matrix.f[k * m + i] /= scale;
          s += (u.matrix.f[this.getID(k, i)] * u.matrix.f[this.getID(k, i)]);
        }

        f = u.matrix.f[this.getID(i, i)];
        g = -copySign(sqrt(s), f);
        h = f * g - s;
        u.matrix.f[this.getID(i, i)] = (f - g);

        if (i != n - 1)
        {
          for (j = l; j < n; j++)
          {
            s = 0.0;
            for (k = i; k < m; k++)
              s += (u.matrix.f[this.getID(k, i)] * u.matrix.f[this.getID(k, j)]);

            f = s / h;

            for (k = i; k < m; k++)
              u.matrix.f[this.getID(k, j)] += (f * u.matrix.f[this.getID(k, i)]);
          }
        }

        for (k = i; k < m; k++)
          u.matrix.f[this.getID(k, i)] = (u.matrix.f[this.getID(k, i)] * scale);
      }
    }
    w.f[i] = (scale * g);

    /* right-hand reduction */
    g = s = scale = 0.0;
    if (i < m && i != n - 1)
    {
      for (k = l; k < n; k++)
        scale += abs(u.matrix.f[this.getID(i, k)]);

      if (scale)
      {
        for (k = l; k < n; k++)
        {
          u.matrix.f[this.getID(i, k)] = (u.matrix.f[this.getID(i, k)] / scale);
          s += (u.matrix.f[this.getID(i, k)] * u.matrix.f[this.getID(i, k)]);
        }
        f = u.matrix.f[this.getID(i, l)];
        g = -copySign(sqrt(s), f);
        h = f * g - s;
        u.matrix.f[this.getID(i, l)] = (f - g);
        for (k = l; k < n; k++)
          rv1.f[k] = u.matrix.f[this.getID(i, k)] / h;

        if (i != m - 1)
        {
          for (j = l; j < m; j++)
          {
            s = 0.0;

            for (k = l; k < n; k++)
              s += (u.matrix.f[this.getID(j, k)] * u.matrix.f[this.getID(i, k)]);

            for (k = l; k < n; k++)
              u.matrix.f[this.getID(j, k)] += (s * rv1.f[k]);
          }
        }
        for (k = l; k < n; k++)
          u.matrix.f[this.getID(i, k)] = (u.matrix.f[this.getID(i, k)] * scale);
      }
    }
    anorm = Math_max(anorm, (abs(w.f[i]) + abs(rv1.f[i])));
  }

  /* accumulate the right-hand transformation */
  for (i = n - 1; i >= 0; i--)
  {
    if (i < n - 1)
    {
      if (g)
      {
        for (j = l; j < n; j++)
          v.matrix.f[v.getID(j, i)] = ((u.matrix.f[this.getID(i, j)] / u.matrix.f[this.getID(i, l)]) / g);

        /* Float32 division to avoid underflow */
        for (j = l; j < n; j++)
        {
          s = 0.0;
          for (k = l; k < n; k++)
            s += (u.matrix.f[this.getID(i, k)] * v.matrix.f[v.getID(k, j)]);
          for (k = l; k < n; k++)
            v.matrix.f[v.getID(k, j)] += (s * v.matrix.f[v.getID(k, i)]);
        }
      }
      for (j = l; j < n; j++)
        v.matrix.f[v.getID(i, j)] = v.matrix.f[v.getID(j, i)] = 0.0;
    }
    v.matrix.f[v.getID(i, i)] += 1.0;
    g = rv1.f[i];
    l = i;
  }

  /* accumulate the left-hand transformation */
  for (i = n - 1; i >= 0; i--)
  {
    l = i + 1;
    g = w.f[i];
    if (i < n - 1) {
      for (j = l; j < n; j++)
        u.matrix.f[this.getID(i, j)] = 0.0;
    }
    if (g)
    {
      g = 1.0 / g;
      if (i != n - 1)
      {
        for (j = l; j < n; j++)
        {
          s = 0.0;
          for (k = l; k < m; k++)
            s += (u.matrix.f[this.getID(k, i)] * u.matrix.f[this.getID(k, j)]);
          f = (s / u.matrix.f[this.getID(i, i)]) * g;
          for (k = i; k < m; k++)
            u.matrix.f[this.getID(k, j)] += (f * u.matrix.f[this.getID(k, i)]);
        }
      }
      for (j = i; j < m; j++)
        u.matrix.f[this.getID(j, i)] = (u.matrix.f[this.getID(j, i)] * g);
    }
    else
    {
      for (j = i; j < m; j++)
        u.matrix.f[this.getID(j, i)] = 0.0;
    }
    u.matrix.f[this.getID(i, i)] += 1;
  }

  /* diagonalize the bidiagonal form */
  for (k = n - 1; k >= 0; k--)
  {   /* loop over singular values */
    for (its = 0; its < 30; its++)
    {   /* loop over allowed iterations */
      flag = 1;
      for (l = k; l >= 0; l--)
      {   /* test for splitting */
        nm = l - 1;
        if (abs(rv1.f[l]) + anorm == anorm)
        {
          flag = 0;
          break;
        }
        if (abs(w.f[nm]) + anorm == anorm)
          break;
      }
      if (flag)
      {
        c = 0.0;
        s = 1.0;
        for (i = l; i <= k; i++)
        {
          f = s * rv1.f[i];
          if (abs(f) + anorm != anorm)
          {
            g = w.f[i];
            h = pythag(f, g);
            w.f[i] = h;
            h = 1.0 / h;
            c = g * h;
            s = (- f * h);
            for (j = 0; j < m; j++)
            {
              y = u.matrix.f[this.getID(j, nm)];
              z = u.matrix.f[this.getID(j, i)];
              u.matrix.f[this.getID(j, nm)] = y * c + z * s;
              u.matrix.f[this.getID(j, i)] = z * c - y * s;
            }
          }
        }
      }
      z = w.f[k];
      if (l == k)
      {   // convergence
        if (z < 0.0)
        {   // make singular value non negative
          w.f[k] = -z;
          for (j = 0; j < n; j++)
            v.matrix.f[v.getID(j, k)] = -v.matrix.f[v.getID(j, k)];
        }
        break;
      }
      if (its >= 30) {
        report("No convergence after 30,000! iterations \n");
        return (0);
      }

      /* shift from bottom 2 x 2 minor */
      x = w.f[l];
      nm = k - 1;
      y = w.f[nm];
      g = rv1.f[nm];
      h = rv1.f[k];
      f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);
      g = pythag(f, 1.0);
      f = ((x - z) * (x + z) + h * ((y / (f + copySign(g, f))) - h)) / x;

      /* next QR transformation */
      c = s = 1.0;
      for (j = l; j <= nm; j++)
      {
        i = j + 1;
        g = rv1.f[i];
        y = w.f[i];
        h = s * g;
        g = c * g;
        z = pythag(f, h);
        rv1.f[j] = z;
        c = f / z;
        s = h / z;
        f = x * c + g * s;
        g = g * c - x * s;
        h = y * s;
        y = y * c;
        for (jj = 0; jj < n; jj++)
        {
          x = v.matrix.f[v.getID(jj, j)];
          z = v.matrix.f[v.getID(jj, i)];
          v.matrix.f[v.getID(jj, j)] = (x * c + z * s);
          v.matrix.f[v.getID(jj, i)] = (z * c - x * s);
        }
        z = pythag(f, h);
        w.f[j] = z;
        if (z)
        {
          z = 1.0 / z;
          c = f * z;
          s = h * z;
        }
        f = (c * g) + (s * y);
        x = (c * y) - (s * g);
        for (jj = 0; jj < m; jj++)
        {
          y = u.matrix.f[this.getID(jj, j)];
          z = u.matrix.f[this.getID(jj, i)];
          u.matrix.f[this.getID(jj, j)] = (y * c + z * s);
          u.matrix.f[this.getID(jj, i)] = (z * c - y * s);
        }
      }
      rv1.f[l] = 0.0;
      rv1.f[k] = f;
      w.f[k] = x;
    }
  }

  for (i = 0; i < w.size(); i++) {
    if (w.f[i] < DIVIDEPRECISION)
      w.f[i] = 0;
  }

  //sort eigenvalues
  for (i = 0; i < n; i++) {
    for (j = i - 1; j >= 0; j--) {
      if (w.f[j] < w.f[i])
      {
        w.f.swap(i, j);
        u.swapCols(i, j);
        v.swapCols(i, j);
        i = j;
      }
    }
  }

  return 1;
}


/******* Polar Decomposition *******/
/* Polar Decomposition of 3x3 matrix in 4x4,
 * M = QS.  See Nicholas Higham and Robert S. Schreiber,
 * Fast Polar Decomposition of An Arbitrary Matrix,
 * Technical Report 88-942, October 1988,
 * Department of Computer Science, Cornell University.
 */
/// \dfgPresetOmit
function Float32 RadialBasisMatrix.polarDecomposition( RadialBasisMatrix M, io RadialBasisMatrix Q, io RadialBasisMatrix S, Float32 tolerance)
{
  // RadialBasisMatrix Mk, MadjTk, Ek;
  // Float32 det, M_one, M_inf, MadjT_one, MadjT_inf, E_one, gamma, g1, g2;
  // Integer i, j;

  // mat_tpose(Mk,=,M,3);
  // M_one = norm_one(Mk);  M_inf = norm_inf(Mk);

  // do
  // {
  //     adjoint_transpose(Mk, MadjTk);
  //     det = vdot(Mk[0], MadjTk[0]);
  //     if (det==0.0)
  //     {
  //         do_rank2(Mk, MadjTk, Mk);
  //         break;
  //     }

  //     MadjT_one = norm_one(MadjTk);
  //     MadjT_inf = norm_inf(MadjTk);

  //     gamma = sqrt(sqrt((MadjT_one*MadjT_inf)/(M_one*M_inf))/fabs(det));
  //     g1 = gamma*0.5;
  //     g2 = 0.5/(gamma*det);
  //     matrixCopy(Ek,=,Mk,3);
  //     matBinop(Mk,=,g1*Mk,+,g2*MadjTk,3);
  //     mat_copy(Ek,-=,Mk,3);
  //     E_one = norm_one(Ek);
  //     M_one = norm_one(Mk);
  //     M_inf = norm_inf(Mk);

  // } while(E_one>(M_one*tolerance));

  // mat_tpose(Q,=,Mk,3); mat_pad(Q);
  // mat_mult(Mk, M, S);  mat_pad(S);

  // for (i=0; i<3; i++)
  //   for (j=i; j<3; j++)
  //     S[i][j] = S[j][i] = 0.5*(S[i][j]+S[j][i]);
  // return (det);

  throw('polarDecomposition is not implemented yet!');
}

/// \dfgPresetOmit
function Float32 RadialBasisMatrix.polarDecomposition(RadialBasisMatrix M, io RadialBasisMatrix Q, io RadialBasisMatrix S)
{
  return this.polarDecomposition( M, Q, S, 1.0e-6);
}

/// \dfgPresetOmit
function String RadialBasisMatrix.getDesc()
{
  String desc = '';
  for (Integer row = 0; row < this.rows; row++)
    desc += this.getRow(row) + "\n";
  return (desc);
}

