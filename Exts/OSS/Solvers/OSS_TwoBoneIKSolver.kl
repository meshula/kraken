require InlineDrawing;
require Geometry;
require Kraken;


object OSS_TwoBoneIKSolver : KrakenSolver {
};

// Default Constructor
function OSS_TwoBoneIKSolver()
{
  this.defaultValues["ikBlend"] = 0.5;
  this.defaultValues["softIK"] = 0.0;
  this.defaultValues["squash"] = 0.0;
  this.defaultValues["stretch"] = 0.0;
  this.defaultValues["root"] = Mat44();
  this.defaultValues["bone0FK"] = Mat44();
  this.defaultValues["bone1FK"] = Mat44();
  this.defaultValues["ikHandle"] = Mat44();
  this.defaultValues["upV"] = Mat44();
  this.defaultValues["boneAxis"] = 0;
  this.defaultValues["upAxis"] = 1;
  this.defaultValues["upV"] =  Mat44();
  this.defaultValues["bone0Len"] = 1.0;
  this.defaultValues["bone1Len"] = 1.0;
}


// Return Arguments for Kraken
function KrakenSolverArg[] OSS_TwoBoneIKSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();

  args.push(KrakenSolverArg('ikBlend', 'In', 'Scalar'));
  args.push(KrakenSolverArg('softIK', 'In', 'Scalar'));  // 0.25 is a nice value if you want it
  args.push(KrakenSolverArg('squash', 'In', 'Scalar'));
  args.push(KrakenSolverArg('stretch', 'In', 'Scalar'));

  args.push(KrakenSolverArg('root', 'In', 'Mat44'));
  args.push(KrakenSolverArg('bone0FK', 'In', 'Mat44'));
  args.push(KrakenSolverArg('bone1FK', 'In', 'Mat44'));
  args.push(KrakenSolverArg('ikHandle', 'In', 'Mat44'));
  args.push(KrakenSolverArg('upV', 'In', 'Mat44'));
  args.push(KrakenSolverArg('boneAxis', 'In', 'SInt32'));
  args.push(KrakenSolverArg('upAxis', 'In', 'SInt32'));

  args.push(KrakenSolverArg('bone0Len', 'In', 'Scalar'));
  args.push(KrakenSolverArg('bone1Len', 'In', 'Scalar'));
  args.push(KrakenSolverArg('bone0Out', 'Out', 'Mat44'));
  args.push(KrakenSolverArg('bone1Out', 'Out', 'Mat44'));
  args.push(KrakenSolverArg('bone2Out', 'Out', 'Mat44'));
  return args;
}


require Math;
require Animation;


function oss_solve2BoneIK(
  in Scalar bone0Length,
  in Scalar bone1Length,
  in Vec3 rootPosition,
  in Vec3 upVPosition,
  in Vec3 goalPosition,
  io Xfo bone0Xfo,
  io Xfo bone1Xfo
) {


  Vec3 rootToGoal = goalPosition - rootPosition;
  Vec3 rootToUpV = upVPosition - rootPosition;

  bone0Xfo.tr = rootPosition;

  Vec3 xaxis = rootToGoal.unit();
  Vec3 zaxis = xaxis.cross(rootToUpV.unit()).cross(xaxis).unit();
  Vec3 yaxis = zaxis.cross(xaxis).unit();
  bone0Xfo.ori.setFromMat33(Mat33(xaxis, yaxis, zaxis).transpose());

  Scalar distToIkGoal = rootToGoal.length();
  // Use trigonometry to determine the ikBoneAngle
  // Law of cosines. a = BoneLength; b = Child BoneLength; c = Distance to the Ik Goal;
  Scalar ikBoneAngle = acos(Math_clamp((sq(bone0Length) + sq(distToIkGoal) - sq(bone1Length)) / (2.0 * bone0Length * distToIkGoal), - 1.0, 1.0));

  // Apply the rotation in the coordinate space of the bone.
  Quat offset;
  offset.setFromAxisAndAngle(Vec3(0.0, -1.0, 0.0), ikBoneAngle);
  bone0Xfo.ori = bone0Xfo.ori * offset;

  // transform the vector without applying scale.
  bone1Xfo.tr = bone0Xfo.tr + bone0Xfo.ori.rotateVector(Vec3(bone0Length, 0.0, 0.0));
  bone1Xfo.ori = bone0Xfo.ori;

  offset.setFrom2Vectors(bone1Xfo.ori.getXaxis(), (goalPosition - bone1Xfo.tr).unit());
  bone1Xfo.ori = offset * bone1Xfo.ori;
}
//
//https://www.desmos.com/calculator/ui3o1qbuer
inline Scalar diminishByExponent(Scalar input, Scalar x, SInt32 exponent)
{
  // For the range of 0 to 1 of x,
  //  Blend input with x exponentially
  return input * (1.0-pow(x, exponent))   +   x * pow(x, exponent);
}


inline Scalar softCompression(Scalar inDist, Scalar fullDist, SInt32 exponent, SInt32 diminishIterations)
{

    Scalar x = 1 - ((fullDist - inDist) / fullDist);

    //report("x: "+x);
    Scalar strength = exponent;  // Less controls if we just combine these two
    Scalar z = 1 - x;

    Scalar zexp = pow(z, exponent);
    //softMult = 1-((zexp*(1.0-zexp)+z*zexp)*(1.0-zexp)+z*zexp);
    //Scalar softMult = 1-(((z^i)*(1.0-(z^i))+z*(z^i))*(1.0-(z^i))+z*(z^i));

    Scalar softMult = 1-((pow(z, strength)*(1.0-zexp) + z*zexp)*(1.0-zexp)+z*zexp);
    softMult = pow(z, strength);
    // Now, let's attenuate this by blending back to x exponentially
    for(SInt32 i = 0; i < diminishIterations; i++)
      softMult = diminishByExponent(softMult, z, exponent);
    softMult = 1-softMult;

    //report("--------------------");
    //report("softMult: "+softMult);

    return fullDist * softMult;

}


// Solve
function OSS_TwoBoneIKSolver.solve!(
  Boolean drawDebug,
  Scalar rigScale,
  Scalar ikBlend,
  Scalar softIK,
  Scalar squash,
  Scalar stretch,
  Mat44 root,
  Mat44 bone0FK,
  Mat44 bone1FK,
  Mat44 ikHandle,
  Mat44 upV,
  SInt32 boneAxis,
  SInt32 upAxis,
  Scalar bone0Len,
  Scalar bone1Len,
  io Mat44 bone0Out,
  io Mat44 bone1Out,
  io Mat44 bone2Out
){
  Xfo bone0FkXfo = Xfo(bone0FK);
  Xfo bone1FkXfo = Xfo(bone1FK);
  Xfo bone0Xfo = bone0FkXfo;
  Xfo bone1Xfo = bone1FkXfo;
  Xfo bone2Xfo;

  Xfo ikHandleXfo = Xfo(ikHandle);

  Scalar bone0Length = bone0Len;
  Scalar bone1Length = bone1Len;

  Scalar bone0LenRigScaled = bone0Length * rigScale;
  Scalar bone1LenRigScaled = bone1Length * rigScale;

  Scalar legLength = (bone0LenRigScaled + bone1LenRigScaled);

  Scalar stretchedRatio = 1.0;  //Delete this

  Vec3 ikHandlePos = ikHandleXfo.tr;

  Vec3 base2handleVec = ikHandleXfo.tr - bone0FkXfo.tr;
  Scalar base2handleDistance = ikHandleXfo.tr.distanceTo(bone0Xfo.tr);
  Vec3 straightLegGoalPos = bone0FkXfo.tr + (base2handleVec.unit() * legLength);


  if(ikBlend > 0) {

    // Damping distance will change the IK goal position

    if (softIK > 0 && base2handleDistance < legLength)
    {
      Scalar softRange = softIK / 10.0;
      Scalar softDist = legLength * softRange;
      Scalar hardDist = legLength * (1.0 - softRange);
      Scalar remainder = base2handleDistance - hardDist;
      if( remainder > 0){

        Scalar base2goalDistance = hardDist + softCompression(remainder, softDist, 3, 4);
        Scalar shrinkage = base2handleDistance / base2goalDistance;
        legLength *= shrinkage;
        bone0Length *= shrinkage;
        bone1Length *= shrinkage;
      }
    }

    if (squash > 0)
    {
      if (base2handleDistance < legLength)
      {
        Scalar squashedLegLength = (legLength - Math_clamp(squash, 0.0,1.0) * (legLength - base2handleDistance) );
        bone0Length *= (squashedLegLength / legLength);
        bone1Length *= (squashedLegLength / legLength);
        legLength = squashedLegLength;
      }
    }

    if (stretch > 0)
    {
      if (base2handleDistance > legLength)
      {
        Scalar stretchedLegLength = (Math_clamp(stretch, 0.0,1.0) * (base2handleDistance - legLength)) + legLength;

        bone0Length *= (stretchedLegLength / legLength);
        bone1Length *= (stretchedLegLength / legLength);
        legLength = stretchedLegLength;
      }

    }

    bone0LenRigScaled = bone0Length * rigScale;
    bone1LenRigScaled = bone1Length * rigScale;

    oss_solve2BoneIK(
      bone0LenRigScaled,
      bone1LenRigScaled,
      root.translation(),
      upV.translation(),
      ikHandlePos,
      bone0Xfo,
      bone1Xfo
    );

    // Because of the way oss_solve2BoneIK treats the upvector (z)
    // Perhaps we can re-write to solve in the correct axes eventually, but for now this should work
    SInt32 upAxisInt = upAxis;
    // if (upAxisInt > 2)
    // {
    //   upAxisInt = upAxisInt - 3;
    // }

    setCorrectAxes(bone0Xfo, boneAxis, upAxisInt, bone0Xfo);
    setCorrectAxes(bone1Xfo, boneAxis, upAxisInt, bone1Xfo);
    setCorrectAxes(bone2Xfo, boneAxis, upAxisInt, bone2Xfo);

    // Blend orientation of IK solution to FK
    bone0Xfo.ori = bone0FkXfo.ori.sphericalLinearInterpolate(bone0Xfo.ori, Math_clamp(ikBlend, 0.0,1.0));
    bone1Xfo.tr = bone0Xfo.transformVector((stretchedRatio * bone0Length) * getAxisAsVector(boneAxis) );
    bone1Xfo.ori = bone1FkXfo.ori.sphericalLinearInterpolate(bone1Xfo.ori, Math_clamp(ikBlend, 0.0,1.0));
  }

  // project bone2 to the end of bone 1
  bone2Xfo = bone1Xfo;
  bone2Xfo.tr = bone1Xfo.transformVector(bone1LenRigScaled * getAxisAsVector(boneAxis));

  // Set scaling
  Vec3 outScaling = Vec3(rigScale, rigScale, rigScale);
  bone0Xfo.sc = outScaling;
  bone1Xfo.sc = outScaling;
  bone2Xfo.sc = outScaling;

  bone0Out = bone0Xfo.toMat44();
  bone1Out = bone1Xfo.toMat44();
  bone2Out = bone2Xfo.toMat44();

  // Set debugging visibility.

  this.setDebug(drawDebug);
  if(this.drawDebug){
    if(!this.handle)
      this.handle = DrawingHandle();
    Color yellowColor(1.0, 1.0, 0.0);
    Color blueColor(0.0, 0.0, 1.0);
    Color redColor(1.0, 0.0, 0.0);
    Color greenColor(0.0, 1.0, 0.0);
    Color cyanColor(0.0, 1.0, 1.0);
    //etDrawBone(this.handle.rootTransform, 'debug', ikHandleXfo, 0.2,  0.2, blueColor);
    //etDrawBone(this.handle.rootTransform, 'debug1', debugXfo, 0.2,  0.2, yellowColor);
    etDrawBone(this.handle.rootTransform, 'debug2', Xfo(straightLegGoalPos), 0.2,  0.2, redColor);
    etDrawBone(this.handle.rootTransform, 'debug4', Xfo(ikHandlePos), 0.1,  0.1, cyanColor);

    //etDrawBone(this.handle.rootTransform, 'bone1', bone1Xfo, bone1LenRigScaled, bone1LenRigScaled * 0.15, boneColor);
  }
}
