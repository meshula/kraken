require Math;
require Curves;
require InlineDrawing;

object OSS_NURBSCurveXfoKLSolver_WorkData {
  Mat44 alignedControls[];
  Xfo controlsXfo[];
  Xfo alignedControlsXfo[];
  Vec3 altNormals[];
  Vec3 altTangents[];
  Xfo xfos[];
  Vec3 positions[];
  Vec3 tangents[];
  Scalar compression[];
  NURBSCurve restCurve;
  NURBSCurve posedCurve;
};

function OSS_NURBSCurveXfoKLSolver_WorkData() {
  this.restCurve = NURBSCurve();
  this.posedCurve = NURBSCurve();

  this.restCurve.computeColors = false;
  this.posedCurve.computeColors = false;
}

function OSS_NURBSCurveXfoKLSolver_WorkData.resize!(UInt32 inCount, UInt32 outCount) {
  this.alignedControls.resize(inCount);
  this.controlsXfo.resize(inCount);
  this.alignedControlsXfo.resize(inCount);
  this.altNormals.resize(outCount);
  this.altTangents.resize(outCount);
  this.xfos.resize(outCount);
  this.positions.resize(outCount);
  this.tangents.resize(outCount);
  this.compression.resize(outCount);
}

object OSS_NURBSCurveXfoKLSolver : KrakenSolver {
  Object workData;
};

function OSS_NURBSCurveXfoKLSolver()
{
  // NOTE, Kraken can create default values for anything
  // we don't specificy here.  Arrays will be empty, matrices identity, etc.
  this.defaultValues["degree"] = 3;
  this.defaultValues["keepArcLength"] = 0.0;
  this.defaultValues["followCurveTangent"] = 1.0;
  this.defaultValues["useLocalNormal"] = 1.0;
  this.defaultValues["followCurveNormal"] = 1.0;
  this.defaultValues["alignX"] = 1;
  this.defaultValues["alignY"] = 2;
  this.defaultValues["alignZ"] = 3;
  this.defaultValues["altTangent"] = Vec3(1,0,0);

  this.workData = OSS_NURBSCurveXfoKLSolver_WorkData();
}

// Return Arguments for Kraken
function KrakenSolverArg[] OSS_NURBSCurveXfoKLSolver.getArguments() {
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('params', 'In', 'Scalar[]'));
  args.push(KrakenSolverArg('degree', 'In', 'SInt8'));
  args.push(KrakenSolverArg('keepArcLength', 'In', 'Scalar'));
  args.push(KrakenSolverArg('followCurveTangent', 'In', 'Scalar'));
  args.push(KrakenSolverArg('useLocalNormal', 'In', 'Scalar'));
  args.push(KrakenSolverArg('followCurveNormal', 'In', 'Scalar'));
  args.push(KrakenSolverArg('alignX', 'In', 'SInt8'));
  args.push(KrakenSolverArg('alignY', 'In', 'SInt8'));
  args.push(KrakenSolverArg('alignZ', 'In', 'SInt8'));
  args.push(KrakenSolverArg('altTangent', 'In', 'Vec3'));
  args.push(KrakenSolverArg('atVec', 'In', 'Mat44'));
  args.push(KrakenSolverArg('parent', 'In', 'Mat44'));
  args.push(KrakenSolverArg('compressionAmt', 'In', 'Scalar'));
  args.push(KrakenSolverArg('controlAligns', 'In', 'Vec3[]'));
  args.push(KrakenSolverArg('controlsRest', 'In', 'Mat44[]'));
  args.push(KrakenSolverArg('rigidIDs', 'In', 'UInt32[]'));
  args.push(KrakenSolverArg('rigidMat44s', 'In', 'Mat44[]'));
  args.push(KrakenSolverArg('controls', 'In', 'Mat44[]'));
  args.push(KrakenSolverArg('outputs', 'Out', 'Mat44[]'));
  args.push(KrakenSolverArg('instance', 'Out', 'InlineInstance'));
  return args;
}

function InlineLinesShape drawLines(
  io InlineTransform rootTransform,
  in String name,
  in Vec3 starts[],
  in Vec3 ends[],
  in Color color
){
  if(starts.size() != ends.size())
    throw("Error: the end and start point need to be of equal size");

  InlineLinesShape linesShape = getOrCreateLines(rootTransform, name, color);
  Lines lines = linesShape.getLines();
  lines.clear();
  for (UInt32 i =0; i<starts.size(); i++) {
    lines.addLine(starts[i], ends[i]);
  }
  return linesShape;
}
// Solve
function OSS_NURBSCurveXfoKLSolver.solve!(
    in Boolean drawDebug,
    in Scalar rigScale,
    in Scalar params[],
    in SInt8 degree,
    in Scalar keepArcLength,
    in Scalar followCurveTangent,
    in Scalar useLocalNormal,
    in Scalar followCurveNormal,
    in SInt8 alignX,
    in SInt8 alignY,
    in SInt8 alignZ,
    in Vec3 altTangent,
    in Mat44 atVec,
    in Mat44 parent,
    in Scalar compressionAmt,
    in Vec3 controlAligns[],
    in Mat44 controlsRest[],
    in UInt32 rigidIDs[],
    in Mat44 rigidMat44s[],
    in Mat44 controls[],
    io Mat44 outputs[],
    out InlineInstance instance
    )
{
  if(controls.size() != controlsRest.size())
    throw("Error in OSS_NURBSCurveXfoKLSolver. The number of controls must match the number of controlsRest.\n\tcontrols.size:" + controls.size() + "\n\tcontrolsRest.size:" + controlsRest.size() + "\n\n\tcontrolAligns.size:" + controlAligns.size() + "\n\tparams.size:" + params.size());

  UInt32 inCount  = controls.size();
  UInt32 outCount = params.size();

  OSS_NURBSCurveXfoKLSolver_WorkData wd = this.workData;
  wd.resize(inCount, outCount);

  Xfo posedXfo;
  Xfo restXfo;

  Scalar keepCurveLen = 0;
  outputs.resize(outCount);

  NURBSCurve restCurve = wd.restCurve;
  NURBSCurve posedCurve = wd.posedCurve;

  // only recompute the rest curve if the input control 
  // count change. this assumes that the rest curve is static
  if(restCurve.cmats.size() != inCount) {
    Mat44 alignedControlsRest[](inCount);
    for (UInt32 i =0; i<inCount; i++) {
      alignedControlsRest[i] = controlsRest[i];
      alignedControlsRest[i].align(controlAligns[i].x, controlAligns[i].y, controlAligns[i].z);
    }
    restCurve.initiate(alignedControlsRest, degree);
  }

  /// Align Controls according to main Curve Direction, given the controlAligns Input array
  for (UInt32 i =0; i<inCount; i++) {
    wd.alignedControls[i] = controls[i];
    wd.alignedControls[i].align(controlAligns[i].x, controlAligns[i].y, controlAligns[i].z);
  }

  posedCurve.initiate(wd.alignedControls, degree);

  Ref <NURBSCurve> posedCurveRef = posedCurve;
  Ref <NURBSCurve> restCurveRef = restCurve;

  //lineTangents.resize(outCount);
  Xfo parentXfo;
  parentXfo.setFromMat44(parent);
  Quat parentRotation = parentXfo.ori;
  Vec3 localAltTangent = parentRotation.rotateVector(altTangent);

  for (UInt32 i =0; i<inCount; i++) {
    wd.controlsXfo[i].setFromMat44(controls[i]);
    wd.alignedControlsXfo[i].setFromMat44(wd.alignedControls[i]);
  }

  for (UInt32 i =0; i<outCount; i++) {
    wd.positions[i]   = posedCurveRef.getPoint(params[i], keepArcLength, keepCurveLen);
    wd.tangents[i]    = posedCurveRef.getTangent(params[i], true, keepArcLength, keepCurveLen);
    // lineTangents[i] = positions[i] + tangents[i];
    wd.altTangents[i] = localAltTangent;
    wd.altNormals[i]  = parent.translation() - wd.positions[i];
    __evalXfosTask(i, wd.xfos, posedCurveRef, params, keepArcLength, keepCurveLen, useLocalNormal, followCurveTangent, followCurveNormal, wd.altTangents, wd.altNormals);
    __evalCompressionTask(i, wd.compression, posedCurveRef, restCurveRef, params, keepArcLength, keepCurveLen);
    Scalar localCompression = Scalar(Math_linearInterpolate(1, wd.compression[i], compressionAmt));
    wd.xfos[i].sc = wd.xfos[i].sc * Vec3(1,localCompression,localCompression);  
    wd.xfos[i].align(alignX,alignY,alignZ);
    outputs[i] = wd.xfos[i].toMat44();

    if(rigidIDs.size()) {
      for(UInt32 n=0; n<rigidIDs.size(); n++) {
        if (i==rigidIDs[n]) 
          {
            outputs[i] = rigidMat44s[n];
        }
      }
    }
  }

  // Set debugging visibility.
  // if(drawDebug) {
  //   if(!this.handle)
  //     this.handle = DrawingHandle();
  //   // drawLines(root, 'Tangents', positions, lineTangents, Color(0.5, 0.0, 0,1));
  //   this.handle.drawAxesInstances('controls', wd.xfos, dummyResult, instance);
  // }
}
