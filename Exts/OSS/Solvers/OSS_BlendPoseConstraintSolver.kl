require InlineDrawing;
require Geometry;
require Kraken;

object OSS_BlendPoseConstraintSolver : KrakenSolver {
};


// Return Arguments for Kraken
function KrakenSolverArg[] OSS_BlendPoseConstraintSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('blend', 'In', 'Scalar'));
  args.push(KrakenSolverArg('constrainerA', 'In', 'Mat44'));
  args.push(KrakenSolverArg('constrainerB', 'In', 'Mat44'));
  args.push(KrakenSolverArg('constrainee', 'Out', 'Mat44'));
  return args;
}


// Solve
function OSS_BlendPoseConstraintSolver.solve!
(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Scalar blend,
  in Mat44 constrainerA,
  in Mat44 constrainerB,
  io Mat44 constrainee
  )
{
  constrainee = Xfo(constrainerA).linearInterpolate(Xfo(constrainerB), blend).toMat44();

  // Set debugging visibility.
  this.setDebug(this.drawDebug);
  if(this.drawDebug){

  }
}
