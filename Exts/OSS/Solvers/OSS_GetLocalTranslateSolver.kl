require Kraken;

object OSS_GetLocalTranslateSolver : KrakenSolver {
};


// Return Arguments for Kraken
function KrakenSolverArg[] OSS_GetLocalTranslateSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();

  args.push(KrakenSolverArg('inMatrix', 'In', 'Mat44'));
  args.push(KrakenSolverArg('inBaseMatrix', 'In', 'Mat44'));
  args.push(KrakenSolverArg('localMatrix', 'Out', 'Mat44'));
  args.push(KrakenSolverArg('localTranslate', 'Out', 'Vec3'));
  args.push(KrakenSolverArg('localRotate', 'Out', 'Vec3'));
  args.push(KrakenSolverArg('localScale', 'Out', 'Vec3'));
  args.push(KrakenSolverArg('localTranslateX', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localTranslateY', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localTranslateZ', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localRotateX', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localRotateY', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localRotateZ', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localScaleX', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localScaleY', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('localScaleZ', 'Out', 'Scalar'));
  return args;
}


// Solve
function OSS_GetLocalTranslateSolver.solve!
(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Mat44 inMatrix,
  in Mat44 inBaseMatrix,
  out Mat44 localMatrix,
  out Vec3 localTranslate,
  out Vec3 localRotate,
  out Vec3 localScale,
  out Scalar localTranslateX,
  out Scalar localTranslateY,
  out Scalar localTranslateZ,
  out Scalar localRotateX,
  out Scalar localRotateY,
  out Scalar localRotateZ,
  out Scalar localScaleX,
  out Scalar localScaleY,
  out Scalar localScaleZ
)
{
  localMatrix = inBaseMatrix.inverse() * inMatrix;
  Mat33 localRotateMat33;
  localMatrix.decompose(localScale, localRotateMat33, localTranslate);

  localTranslateX = localTranslate.x;
  localTranslateY = localTranslate.y;
  localTranslateZ = localTranslate.z;

  Quat localRotateQuat;
  localRotateQuat = Quat(localRotateMat33);
  localRotate = localRotateQuat.toEulerAngles();
  localRotateX = localRotate.x;
  localRotateY = localRotate.y;
  localRotateZ = localRotate.z;

  localScaleX = localScale.x;
  localScaleY = localScale.y;
  localScaleZ = localScale.z;
}
