require Kraken;

object OSS_GetLocalTranslateSolver : KrakenSolver {
};


// Default Constructor
function OSS_GetLocalTranslateSolver()
{
  this.defaultValues["inMatrix"] = Mat44();
  this.defaultValues["inBaseMatrix"] = Mat44();
}

// Return Arguments for Kraken
function KrakenSolverArg[] OSS_GetLocalTranslateSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();

  args.push(KrakenSolverArg('inMatrix', 'In', 'Mat44'));
  args.push(KrakenSolverArg('inBaseMatrix', 'In', 'Mat44'));
  args.push(KrakenSolverArg('localMatrix', 'Out', 'Mat44'));
  args.push(KrakenSolverArg('translate', 'Out', 'Vec3'));
  args.push(KrakenSolverArg('rotate', 'Out', 'Vec3'));
  args.push(KrakenSolverArg('scale', 'Out', 'Vec3'));
  args.push(KrakenSolverArg('tx', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('ty', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('tz', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('rx', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('ry', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('rz', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('sx', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('sy', 'Out', 'Scalar'));
  args.push(KrakenSolverArg('sz', 'Out', 'Scalar'));
  return args;
}


// Solve
function OSS_GetLocalTranslateSolver.solve!
(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Mat44 inMatrix,
  in Mat44 inBaseMatrix,
  out Mat44 localMatrix,
  out Vec3 translate,
  out Vec3 rotate,
  out Vec3 scale,
  out Scalar tx,
  out Scalar ty,
  out Scalar tz,
  out Scalar rx,
  out Scalar ry,
  out Scalar rz,
  out Scalar sx,
  out Scalar sy,
  out Scalar sz
)
{
  localMatrix = inBaseMatrix.inverse() * inMatrix;
  Mat33 rMat33;
  localMatrix.decompose(scale, rMat33, translate);

  tx = translate.x;
  ty = translate.y;
  tz = translate.z;

  Quat rQuat;
  rQuat = Quat(rMat33);
  rotate = rQuat.toEulerAngles();

  rx = rotate.x;
  ry = rotate.y;
  rz = rotate.z;

  sx = scale.x;
  sy = scale.y;
  sz = scale.z;
}
