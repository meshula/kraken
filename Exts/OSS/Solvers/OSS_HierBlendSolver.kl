require InlineDrawing;
require Geometry;
require Kraken;

require InlineDrawing;
require Geometry;

object OSS_HierBlendSolver : KrakenSolver {
};


// Return Arguments for Kraken
function KrakenSolverArg[] OSS_HierBlendSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('constrainers', 'In', 'Mat44[]'));
  args.push(KrakenSolverArg('constrainees', 'Out', 'Mat44[]'));
  return args;
}


// Solve
function OSS_HierBlendSolver.solve!
(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Mat44 constrainers[],
  in UInt32 parentIndexes[],  // NOTE:  No child indices can come before parent indices
  io Mat44 constrainees[]
  )
{
  if(constrainers.size != 1 && constrainers.size != constrainees.size)
    throw("Error in OSS_HierBlendSolver. The number of constrainees must be 1 or match the number of constrainers. constrainers.size:" + constrainers.size + "; constrainees.size:" + constrainees.size);



for(UInt32 i=0; i<constrainers.size; i++)
{
      constrainees[i] = constrainers[i];
}





  // Set debugging visibility.
  this.setDebug(drawDebug);
  if(this.drawDebug){
    Color boneColor(1.0, 1.0, 0);
    for(UInt32 i=0; i<constrainers.size; i++)
      etDrawBone(this.handle.rootTransform, 'constraint'+i, constrainees[i], 1.0, 0.25, boneColor);
  }
}
