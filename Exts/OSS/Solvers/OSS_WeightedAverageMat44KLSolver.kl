require Math;
require Kraken;

object OSS_WeightedAverageMat44KLSolver : KrakenSolver {
};

// Default Constructor
function OSS_WeightedAverageMat44KLSolver()
{
  Mat44 mats[];
  Scalar matWeights[];
  this.defaultValues["mats"] = mats;
  this.defaultValues["matWeights"] = matWeights;
  this.defaultValues["ikBlend"] = 0.5;
  this.defaultValues["translationAmt"] = 0.0;
  this.defaultValues["rotationAmt"] = 0.0;
  this.defaultValues["scaleAmt"] = 0.0;
  this.defaultValues["restMatParent"] = Mat44();
  this.defaultValues["restMat"] = Mat44();
  this.defaultValues["parent"] = Mat44();
}

// Return Arguments for Kraken
function KrakenSolverArg[] OSS_WeightedAverageMat44KLSolver.getArguments() {
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('mats', 'In', 'Mat44[]'));
  args.push(KrakenSolverArg('matWeights', 'In', 'Scalar[]'));
  args.push(KrakenSolverArg('translationAmt', 'In', 'Scalar'));
  args.push(KrakenSolverArg('scaleAmt', 'In', 'Scalar'));
  args.push(KrakenSolverArg('rotationAmt', 'In', 'Scalar'));
  args.push(KrakenSolverArg('restMatParent', 'In', 'Mat44'));
  args.push(KrakenSolverArg('restMat', 'In', 'Mat44'));
  args.push(KrakenSolverArg('parent', 'In', 'Mat44'));
  args.push(KrakenSolverArg('result', 'Out', 'Mat44'));
  return args;
}

//NOTE: weights need to be normalized

function Scalar[].normalizeScalarArray!()  {
  Boolean takeFirstIfInvalid = true;
  UInt32 count = this.size();
  Scalar sum;

  for( Size i = 0; i < this.size(); ++i )
    sum += this[i];

  if( sum > 0.0001 ) {
    for( Size i = 0; i < count; ++i )
      this[i] = this[i]/sum;

  } else if(count) {
    //Just put equal weights; ensures sum is 1.0
    for( Size i = 0; i < count; ++i )
      if (!takeFirstIfInvalid) {
        this[i] = 1/Scalar(count);
      } else {
        if (i==0) this[i]=1;
        else this[i]=0;
      }
  }
}


function Quat weightedAverageQuat(in Scalar[] quatWeights, io Quat[] quats) {
  UInt32 numQuats = quatWeights.size();
  Quat cumQuat = Quat()*0;
  quats.resize(numQuats);

  for (UInt32 i=0; i<numQuats; i++)
  {
    Quat wQuat = quats[i]*quatWeights[i];

    //Before we add the new rotation to the average (mean), we have to check whether the quaternion has to be inverted. Because
    //q and -q are the same rotation, but cannot be averaged, we have to make sure they are all the same.
    if (wQuat.almostEqual(cumQuat)){
        wQuat.unit_safe().conjugate();
    }
    cumQuat += wQuat;
  }
  return cumQuat.unit_safe();
}


function Vec3 weightedAverageVec3 (in Scalar[] vecWeights, io Vec3[] vectors) {
  Vec3 result;
  UInt32 numVecs = vecWeights.size();
  Vec3 cumVec = Vec3()*0;
  vectors.resize(numVecs);

  for (UInt32 i=0; i<numVecs; i++)
  {
    Vec3 wVec = vectors[i]*vecWeights[i];
    result += wVec;
  }
  return result;
}

// Solve
function OSS_WeightedAverageMat44KLSolver.solve!
(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Mat44[] mats,
  in Scalar[] matWeights,
  in Scalar translationAmt,
  in Scalar scaleAmt,
  in Scalar rotationAmt,
  in Mat44 restMat,
  in Mat44 restMatParent,
  in Mat44 parent,
  out Mat44 result
)
{
  // get Original Transform, casting to Xfo
  Mat44 restMatLocal = restMatParent.inverse()*restMat;
  Xfo origXfo = parent*restMat;
  Xfo resultXfo;
  Xfo xfos[];
  xfos.push(origXfo);
  Scalar weightSum;
  Scalar clampedWeight;
  Scalar normMatWeights[];
  normMatWeights.push(0.0);
  for (UInt32 i = 0; i<mats.size(); i++){
    // setting up the target matrices, adding offset (original rest position)
    Xfo xfo;
    xfos.push(xfo.setFromMat44(mats[i]*restMatLocal));
    clampedWeight = Math_clamp(matWeights[i], 0, 1 );
    normMatWeights.push(clampedWeight);
    weightSum += clampedWeight;
  }

  normMatWeights[0] = 1.0 - Math_clamp(weightSum, 0, 1 );
  normMatWeights.normalizeScalarArray();

  UInt32 s = xfos.size();

  Quat ori[];
  Vec3 tr[];
  Vec3 sc[];

  ori.resize(s);
  tr.resize(s);
  sc.resize(s);

  for (UInt32 i =0; i<s; i++)
  {
    ori[i]= xfos[i].ori;
    tr[i] = xfos[i].tr;
    sc[i] = xfos[i].sc;
  }

  Quat averageRotation    = weightedAverageQuat(normMatWeights, ori);
  Vec3 averageTranslation = weightedAverageVec3(normMatWeights, tr);
  Vec3 averageScale       = weightedAverageVec3(normMatWeights, sc);

  resultXfo.ori = origXfo.ori.sphericalLinearInterpolate(averageRotation, rotationAmt);
  resultXfo.tr  = origXfo.tr.linearInterpolate(averageTranslation, translationAmt);
  resultXfo.sc  = origXfo.sc.linearInterpolate(averageScale, scaleAmt);

  // return Local Transform
  resultXfo = parent.inverse()*resultXfo;
  result = resultXfo.toMat44();
}
