require Kraken;

object OSS_RemapScalarValueSolver : KrakenSolver {
};

function OSS_RemapScalarValueSolver()
{
  // NOTE, Kraken can create default values for anything
  // we don't specificy here.  Arrays will be empty, matrices identity, etc.
  Scalar input;
  Scalar result;

  this.defaultValues["input"] = input;
  this.defaultValues["result"] = result;
}


// Return Arguments for Kraken
function KrakenSolverArg[] OSS_RemapScalarValueSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();
  // we should turn this into curves
  args.push(KrakenSolverArg('input', 'In', 'Scalar'));
  args.push(KrakenSolverArg('scale', 'In', 'Scalar'));
  args.push(KrakenSolverArg('clamp', 'In', 'Boolean'));
  args.push(KrakenSolverArg('result', 'Out', 'Scalar'));
  //args.push(KrakenSolverArg('result', 'Out', 'Scalar[]'));  KL builder can't handle non-connected outputs right now
  return args;
}


// Solve
function OSS_RemapScalarValueSolver.solve!
(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Scalar input,
  in Scalar scale,
  in Boolean clamp,
  out Scalar result,
  )
{
  result = input*abs(scale);
  if (clamp) {
    if (scale > 0) {
      result = abs(Scalar(Math_max(0,result)));
    } else {
      result = abs(Scalar(Math_min(0,result)));
    }
  }
}

