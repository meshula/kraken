require Math;

object KrakenLookAtClip : KrakenClip {
  Index matrixIndex;
  KrakenClip childClip;
  Float32 speed;
  String names[];
  SInt32 objectID[];
  UInt32 nameToId[String];
  Vec3 targets[];
  Vec3 axes[];
  Boolean locked[];
  Float32 amounts[];
  Float32 prevVelocity[];
  Quat prevOri[];

  UInt64 rigVersion;
  KrakenClipLookup lookup;
  Vec3 simTarget;
};



function Vec3 Quat.getAxis(in SInt8 axisIndex)
{
  switch (axisIndex)
  {
    case 1:
      return this.getXaxis();
    case 2:
      return this.getYaxis();
    case 3:
      return this.getZaxis();
    case -1:
      return this.getXaxis().negate();
    case -2:
      return this.getYaxis().negate();
    case -3:
      return this.getZaxis().negate();
  }
  return this.getXaxis();
}

function KrakenLookAtClip(Index matrixIndex, KrakenClip childClip) {
  this.matrixIndex = matrixIndex;
  this.childClip = childClip;
  this.speed = 1;
  this.lookup = null;
  this.rigVersion = 0;
  this.simTarget.x = SCALAR_INFINITE;
}

/// \dfgPresetDefault target {"x": 1.0, "y": 0.0, "z": 0.0}
/// \dfgPresetDefault axis {"x": 0.0, "y": 1.0, "z": 0.0}
/// \dfgPresetDefault locked true
/// \dfgPresetDefault amount 1.0
/// \dfgPresetRange amount (0.0, 1.0)
function KrakenLookAtClip.defineLookAt!(
  String name,
  Vec3 target,
  Vec3 axis,
  Boolean locked,
  Float32 amount
) {
  UInt32 id = this.nameToId.get(name, this.names.size());
  if(id == this.names.size()) {
    this.nameToId[name] = this.names.size();
    this.names.push(name);
    this.objectID.push(-1);
    this.targets.push(target);
    this.axes.push(axis);
    this.locked.push(locked);
    this.amounts.push(amount);
    this.prevVelocity.push(Float32());
    this.prevOri.push(Quat());
  } else {
    this.targets[id] = target;
    this.axes[id] = axis;
    this.locked[id] = locked;
    this.amounts[id] = amount;
  }
  this.lookup = null;
}

UInt32 KrakenLookAtClip.getChannelCount() {
  return this.names.size();
}

String KrakenLookAtClip.getChannelName(UInt32 id) {
  return this.names[id];
}

UInt32 KrakenLookAtClip.getChannelType(UInt32 id) {
  return KrakenClipChannel_Xfo;
}

Float32 KrakenLookAtClip.evaluateFloat32!(UInt32 id, io KrakenKLRig rig, KrakenClipContext context) {
  return Float32();
}

/*
Xfo[] KrakenLookAtClip.solveHierarchy()
{
  Xfo allXfos<> = rig.getAllParentXfos();
  Xfo allParentsXfos<> = rig.getAllParentXfos();
  Size allXfosSize = allXfos.size();

  Xfo hierOutXfos[];

  for(Integer i=0; i<allXfosSize; i++)
  {
          Xfo localAXfo = allParentsXfos[i].inverse() * allXfos[i];
          hierOutXfos[i] = hierOutXfos[i] * localXfo;
  }
  return hierOutXfos;
}
*/
Xfo KrakenLookAtClip.evaluateXfo!(UInt32 id, io KrakenKLRig rig, KrakenClipContext context) {

  if(rig == null)
    return Xfo();
  if(this.targets[id].almostEqual(Vec3()))
    return Xfo();


  Xfo allXfos<> = rig.getAllXfos();
  Xfo allParentsXfos<> = rig.getAllParentXfos();
  String allNames <>   = rig.getAllNames();
  // if control hasn't been matched to its global id by name, do it now.
  if(this.objectID[id] == -1) {
    for(Size i=0;i<allNames.size();i++) {
      // find matching name and establish global id
      if(allNames[i] == this.names[id]) {
        this.objectID[id] = i;
        break;
      }
    }
    if(this.objectID[id] == -1)
      return Xfo(); // not found
  }


  SInt8 upAxisIndex =3;
  SInt8 alignAxisIndex = 2;
  Quat offsetOri, targetOri, currentDelta, newDelta, result, newOri;
  Xfo targetXfo;

  // get current rotation
      //Vec3 inPos = Xfo(inMatrix).tr;
  Xfo controlXfo  = allXfos[this.objectID[id]];
  Xfo parentXfo   = allParentsXfos[this.objectID[id]];


  // get current delta
    // Vec3 newVel = (inPos - position); //*drag == ( * 0.9);
  // getTargetRotation
  Vec3 target = context.matrices[this.matrixIndex].translation();
  Vec3 direction = (target - parentXfo.tr).unit();
  Vec3 upVector = parentXfo.ori.getAxis(upAxisIndex).unit();
  targetOri.setFromDirectionAndUpvector(direction, upVector);
  targetXfo.ori = targetOri;
  targetXfo = Xfo_align((targetXfo,1,2,3);
  targetOri = targetXfo.ori;
  // offsetOri.setFrom2Vectors(parentXfo.ori.getAxis(alignAxisIndex), parentXfo.ori.getAxis(upAxisIndex));
  // targetOri = offsetOri*targetOri;

  // currentDelta = this.prevOri[id].inverse()*targetOri;
  // newDelta = controlXfo.ori*currentDelta;
  // controlXfo.ori = this.prevOri[id].sphericalLinearInterpolate(newDelta, Float32(Math_clamp(this.amounts[id], 0.0, 1.0)));
  controlXfo.ori = parentXfo.ori.sphericalLinearInterpolate(targetOri, Float32(Math_clamp(this.amounts[id], 0.0, 1.0)));
  this.prevOri[id] = controlXfo.ori;

  return  parentXfo.ori.inverse() * controlXfo;
}

function KrakenLookAtClip.apply(io KrakenKLRig rig, KrakenClipContext context, Float32 factor) {
  if(this.childClip)
    this.childClip.apply(rig, context, factor);

  KrakenLookAtClip clip = this;
  if(clip.lookup == null)
    clip.lookup = KrakenClipLookup(rig, clip);
  clip.lookup.applyClip(rig, clip, context, factor);
}

function JSONDictValue KrakenLookAtClip.saveToJson!() {
  JSONArrayValue lookats();
  for(Size i=0;i<this.names.size();i++) {
    JSONDictValue lookat();
    lookat.setString('name', this.names[i]);
    lookat.setVec3('target', this.targets[i]);
    lookat.setVec3('axis', this.axes[i]);
    lookat.setBoolean('locked', this.locked[i]);
    lookat.setScalar('amount', this.amounts[i]);
    lookats.add(lookat);
  }
  JSONDictValue content();
  content.setInteger('matrixIndex', this.matrixIndex);
  if(this.childClip) {
    content.setString('childClipType', this.childClip.type());
    content.set('childClip', this.childClip.saveToJson());
  }
  content.set('lookats', lookats);
  return content;
}

function KrakenLookAtClip.loadFromJson!(JSONDictValue json) {
  this.names.resize(0);
  this.nameToId.clear();
  this.targets.resize(0);
  this.amounts.resize(0);
  this.rigVersion = 0;
  this.speed = 1.0;
  this.simTarget.x = SCALAR_INFINITE;

  this.matrixIndex = json.getInteger('matrixIndex');
  if(json.has('childClipType')) {
    String childClipType = json.getString('childClipType');
    this.childClip = KrakenClip_getFromTypeName(childClipType);
    this.childClip.loadFromJson(json.get('childClip'));
  } else {
    this.childClip = null;
  }

  JSONArrayValue lookats = json.get('lookats');
  for(Size i=0;i<lookats.size();i++) {
    JSONDictValue lookat = lookats.get(i);
    String name = lookat.getString('name');
    Vec3 target = lookat.getVec3('target');
    Vec3 axis = lookat.getVec3('axis');
    Boolean locked = lookat.getBoolean('locked');
    Float32 amount = lookat.getScalar('amount');
    this.defineLookAt(name, target, axis, locked, amount);
  }
}
